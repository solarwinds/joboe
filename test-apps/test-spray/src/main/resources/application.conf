akka {
  loglevel = INFO
}

spray.can.server {
  request-timeout = 60s
  idle-timeout = 120s
  remote-address-header = on
}

kamon {
    akka {
    # If ask-pattern-timeout-warning is enabled, a WARN level log message will be generated if a future generated by the `ask`
    # pattern fails with a `AskTimeoutException` and the log message will contain information depending of the strategy selected.
    # strategies:
    #   - off: nothing to do.
    #   - lightweight: logs the warning when a timeout is reached using org.aspectj.lang.reflect.SourceLocation.
    #   - heavyweight: logs the warning when a timeout is reached using a stack trace captured at the moment the future was created.
    ask-pattern-timeout-warning = off

  }

  metric.filters {
    akka-actor {
      includes = [ "*/user/*"]
      excludes = [ "*/system/**", "*/user/IO-**" ]
    }

    akka-router {
      includes = [ "*/user/*"]
      excludes = [ "*/system/**", "*/user/IO-**" ]
    }

    akka-dispatcher {
      includes = [ "*/user/*"]
      excludes = []
    }
    
    trace {
        includes = [ "**" ]
        excludes = [ ]
    }
  }

  modules {
    kamon-akka {
      requires-aspectj = yes
    }
  }
   spray {

    # Header name used when propagating the `TraceContext.token` value across applications.
    trace-token-header-name = "X-Trace-Token"

    # When set to true, Kamon will automatically set and propogate the `TraceContext.token` value under the following
    # conditions:
    #  - When a server side request is received containing the trace token header, the new `TraceContext` will have that
    #    some token, and once the response to that request is ready, the trace token header is also included in the
    #    response.
    #  - When a spray-client request is issued and a `TraceContext` is available, the trace token header will be included
    #    in the `HttpRequest` headers.
    automatic-trace-token-propagation = true

    # Fully qualified name of the implementation of kamon.spray.SprayNameGenerator that will be used for assigning names
    # to traces and client http segments.
    name-generator = kamon.spray.DefaultNameGenerator

    client {
      # Strategy used for automatic trace segment generation when issue requests with spray-client. The possible values
      # are:
      #  - request-level: measures the time during which the user application code is waiting for a spray-client request to
      #    complete, by attaching a callback to the Future[HttpResponse] returned by `spray.client.pipelining.sendReceive`.
      #    If `spray.client.pipelining.sendReceive` is not used, the segment measurement wont be performed.
      #  - host-level: measures the internal time taken by spray-client to finish a request. Sometimes the user application
      #    code has a finite future timeout (like when using `spray.client.pipelining.sendReceive`) that doesn't match
      #    the actual amount of time spray might take internally to resolve a request, counting retries, redirects,
      #    connection timeouts and so on. If using the internal strategy, the measured time will include the entire time
      #    since the request has been received by the corresponding `HttpHostConnector` until a response is sent back
      #    to the requester.
      instrumentation-level = request-level
    }
  }
}

h2mem1 = {
  url = "jdbc:h2:mem:test1"
  driver = org.h2.Driver
  keepAliveConnection = true
  numThreads = 2
}