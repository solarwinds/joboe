/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.appoptics.ext.thriftgenerated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2020-11-10")
public class HostID implements org.apache.thrift.TBase<HostID, HostID._Fields>, java.io.Serializable, Cloneable, Comparable<HostID> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostID");

  private static final org.apache.thrift.protocol.TField HOSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostname", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OBSOLETE_IP_ADDRESSES_FIELD_DESC = new org.apache.thrift.protocol.TField("OBSOLETE_ip_addresses", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField OBSOLETE_UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("OBSOLETE_uuid", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField EC2_INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ec2InstanceID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EC2_AVAILABILITY_ZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("ec2AvailabilityZone", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DOCKER_CONTAINER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dockerContainerID", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MAC_ADDRESSES_FIELD_DESC = new org.apache.thrift.protocol.TField("macAddresses", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField HEROKU_DYNO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("herokuDynoID", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField AZ_APP_SERVICE_INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("azAppServiceInstanceID", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField HOST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("hostType", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostIDStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostIDTupleSchemeFactory());
  }

  public String hostname; // required
  public List<String> OBSOLETE_ip_addresses; // required
  public String OBSOLETE_uuid; // required
  public int pid; // required
  public String ec2InstanceID; // required
  public String ec2AvailabilityZone; // required
  public String dockerContainerID; // required
  public List<String> macAddresses; // required
  public String herokuDynoID; // required
  public String azAppServiceInstanceID; // required
  /**
   * 
   * @see HostType
   */
  public HostType hostType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOSTNAME((short)1, "hostname"),
    OBSOLETE_IP_ADDRESSES((short)2, "OBSOLETE_ip_addresses"),
    OBSOLETE_UUID((short)3, "OBSOLETE_uuid"),
    PID((short)4, "pid"),
    EC2_INSTANCE_ID((short)5, "ec2InstanceID"),
    EC2_AVAILABILITY_ZONE((short)6, "ec2AvailabilityZone"),
    DOCKER_CONTAINER_ID((short)7, "dockerContainerID"),
    MAC_ADDRESSES((short)8, "macAddresses"),
    HEROKU_DYNO_ID((short)9, "herokuDynoID"),
    AZ_APP_SERVICE_INSTANCE_ID((short)10, "azAppServiceInstanceID"),
    /**
     * 
     * @see HostType
     */
    HOST_TYPE((short)11, "hostType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOSTNAME
          return HOSTNAME;
        case 2: // OBSOLETE_IP_ADDRESSES
          return OBSOLETE_IP_ADDRESSES;
        case 3: // OBSOLETE_UUID
          return OBSOLETE_UUID;
        case 4: // PID
          return PID;
        case 5: // EC2_INSTANCE_ID
          return EC2_INSTANCE_ID;
        case 6: // EC2_AVAILABILITY_ZONE
          return EC2_AVAILABILITY_ZONE;
        case 7: // DOCKER_CONTAINER_ID
          return DOCKER_CONTAINER_ID;
        case 8: // MAC_ADDRESSES
          return MAC_ADDRESSES;
        case 9: // HEROKU_DYNO_ID
          return HEROKU_DYNO_ID;
        case 10: // AZ_APP_SERVICE_INSTANCE_ID
          return AZ_APP_SERVICE_INSTANCE_ID;
        case 11: // HOST_TYPE
          return HOST_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOSTNAME, new org.apache.thrift.meta_data.FieldMetaData("hostname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OBSOLETE_IP_ADDRESSES, new org.apache.thrift.meta_data.FieldMetaData("OBSOLETE_ip_addresses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OBSOLETE_UUID, new org.apache.thrift.meta_data.FieldMetaData("OBSOLETE_uuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EC2_INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("ec2InstanceID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EC2_AVAILABILITY_ZONE, new org.apache.thrift.meta_data.FieldMetaData("ec2AvailabilityZone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOCKER_CONTAINER_ID, new org.apache.thrift.meta_data.FieldMetaData("dockerContainerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAC_ADDRESSES, new org.apache.thrift.meta_data.FieldMetaData("macAddresses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.HEROKU_DYNO_ID, new org.apache.thrift.meta_data.FieldMetaData("herokuDynoID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AZ_APP_SERVICE_INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("azAppServiceInstanceID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("hostType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostID.class, metaDataMap);
  }

  public HostID() {
  }

  public HostID(
    String hostname,
    List<String> OBSOLETE_ip_addresses,
    String OBSOLETE_uuid,
    int pid,
    String ec2InstanceID,
    String ec2AvailabilityZone,
    String dockerContainerID,
    List<String> macAddresses,
    String herokuDynoID,
    String azAppServiceInstanceID,
    HostType hostType)
  {
    this();
    this.hostname = hostname;
    this.OBSOLETE_ip_addresses = OBSOLETE_ip_addresses;
    this.OBSOLETE_uuid = OBSOLETE_uuid;
    this.pid = pid;
    setPidIsSet(true);
    this.ec2InstanceID = ec2InstanceID;
    this.ec2AvailabilityZone = ec2AvailabilityZone;
    this.dockerContainerID = dockerContainerID;
    this.macAddresses = macAddresses;
    this.herokuDynoID = herokuDynoID;
    this.azAppServiceInstanceID = azAppServiceInstanceID;
    this.hostType = hostType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostID(HostID other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHostname()) {
      this.hostname = other.hostname;
    }
    if (other.isSetOBSOLETE_ip_addresses()) {
      List<String> __this__OBSOLETE_ip_addresses = new ArrayList<String>(other.OBSOLETE_ip_addresses);
      this.OBSOLETE_ip_addresses = __this__OBSOLETE_ip_addresses;
    }
    if (other.isSetOBSOLETE_uuid()) {
      this.OBSOLETE_uuid = other.OBSOLETE_uuid;
    }
    this.pid = other.pid;
    if (other.isSetEc2InstanceID()) {
      this.ec2InstanceID = other.ec2InstanceID;
    }
    if (other.isSetEc2AvailabilityZone()) {
      this.ec2AvailabilityZone = other.ec2AvailabilityZone;
    }
    if (other.isSetDockerContainerID()) {
      this.dockerContainerID = other.dockerContainerID;
    }
    if (other.isSetMacAddresses()) {
      List<String> __this__macAddresses = new ArrayList<String>(other.macAddresses);
      this.macAddresses = __this__macAddresses;
    }
    if (other.isSetHerokuDynoID()) {
      this.herokuDynoID = other.herokuDynoID;
    }
    if (other.isSetAzAppServiceInstanceID()) {
      this.azAppServiceInstanceID = other.azAppServiceInstanceID;
    }
    if (other.isSetHostType()) {
      this.hostType = other.hostType;
    }
  }

  public HostID deepCopy() {
    return new HostID(this);
  }

  @Override
  public void clear() {
    this.hostname = null;
    this.OBSOLETE_ip_addresses = null;
    this.OBSOLETE_uuid = null;
    setPidIsSet(false);
    this.pid = 0;
    this.ec2InstanceID = null;
    this.ec2AvailabilityZone = null;
    this.dockerContainerID = null;
    this.macAddresses = null;
    this.herokuDynoID = null;
    this.azAppServiceInstanceID = null;
    this.hostType = null;
  }

  public String getHostname() {
    return this.hostname;
  }

  public HostID setHostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  public void unsetHostname() {
    this.hostname = null;
  }

  /** Returns true if field hostname is set (has been assigned a value) and false otherwise */
  public boolean isSetHostname() {
    return this.hostname != null;
  }

  public void setHostnameIsSet(boolean value) {
    if (!value) {
      this.hostname = null;
    }
  }

  public int getOBSOLETE_ip_addressesSize() {
    return (this.OBSOLETE_ip_addresses == null) ? 0 : this.OBSOLETE_ip_addresses.size();
  }

  public java.util.Iterator<String> getOBSOLETE_ip_addressesIterator() {
    return (this.OBSOLETE_ip_addresses == null) ? null : this.OBSOLETE_ip_addresses.iterator();
  }

  public void addToOBSOLETE_ip_addresses(String elem) {
    if (this.OBSOLETE_ip_addresses == null) {
      this.OBSOLETE_ip_addresses = new ArrayList<String>();
    }
    this.OBSOLETE_ip_addresses.add(elem);
  }

  public List<String> getOBSOLETE_ip_addresses() {
    return this.OBSOLETE_ip_addresses;
  }

  public HostID setOBSOLETE_ip_addresses(List<String> OBSOLETE_ip_addresses) {
    this.OBSOLETE_ip_addresses = OBSOLETE_ip_addresses;
    return this;
  }

  public void unsetOBSOLETE_ip_addresses() {
    this.OBSOLETE_ip_addresses = null;
  }

  /** Returns true if field OBSOLETE_ip_addresses is set (has been assigned a value) and false otherwise */
  public boolean isSetOBSOLETE_ip_addresses() {
    return this.OBSOLETE_ip_addresses != null;
  }

  public void setOBSOLETE_ip_addressesIsSet(boolean value) {
    if (!value) {
      this.OBSOLETE_ip_addresses = null;
    }
  }

  public String getOBSOLETE_uuid() {
    return this.OBSOLETE_uuid;
  }

  public HostID setOBSOLETE_uuid(String OBSOLETE_uuid) {
    this.OBSOLETE_uuid = OBSOLETE_uuid;
    return this;
  }

  public void unsetOBSOLETE_uuid() {
    this.OBSOLETE_uuid = null;
  }

  /** Returns true if field OBSOLETE_uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetOBSOLETE_uuid() {
    return this.OBSOLETE_uuid != null;
  }

  public void setOBSOLETE_uuidIsSet(boolean value) {
    if (!value) {
      this.OBSOLETE_uuid = null;
    }
  }

  public int getPid() {
    return this.pid;
  }

  public HostID setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getEc2InstanceID() {
    return this.ec2InstanceID;
  }

  public HostID setEc2InstanceID(String ec2InstanceID) {
    this.ec2InstanceID = ec2InstanceID;
    return this;
  }

  public void unsetEc2InstanceID() {
    this.ec2InstanceID = null;
  }

  /** Returns true if field ec2InstanceID is set (has been assigned a value) and false otherwise */
  public boolean isSetEc2InstanceID() {
    return this.ec2InstanceID != null;
  }

  public void setEc2InstanceIDIsSet(boolean value) {
    if (!value) {
      this.ec2InstanceID = null;
    }
  }

  public String getEc2AvailabilityZone() {
    return this.ec2AvailabilityZone;
  }

  public HostID setEc2AvailabilityZone(String ec2AvailabilityZone) {
    this.ec2AvailabilityZone = ec2AvailabilityZone;
    return this;
  }

  public void unsetEc2AvailabilityZone() {
    this.ec2AvailabilityZone = null;
  }

  /** Returns true if field ec2AvailabilityZone is set (has been assigned a value) and false otherwise */
  public boolean isSetEc2AvailabilityZone() {
    return this.ec2AvailabilityZone != null;
  }

  public void setEc2AvailabilityZoneIsSet(boolean value) {
    if (!value) {
      this.ec2AvailabilityZone = null;
    }
  }

  public String getDockerContainerID() {
    return this.dockerContainerID;
  }

  public HostID setDockerContainerID(String dockerContainerID) {
    this.dockerContainerID = dockerContainerID;
    return this;
  }

  public void unsetDockerContainerID() {
    this.dockerContainerID = null;
  }

  /** Returns true if field dockerContainerID is set (has been assigned a value) and false otherwise */
  public boolean isSetDockerContainerID() {
    return this.dockerContainerID != null;
  }

  public void setDockerContainerIDIsSet(boolean value) {
    if (!value) {
      this.dockerContainerID = null;
    }
  }

  public int getMacAddressesSize() {
    return (this.macAddresses == null) ? 0 : this.macAddresses.size();
  }

  public java.util.Iterator<String> getMacAddressesIterator() {
    return (this.macAddresses == null) ? null : this.macAddresses.iterator();
  }

  public void addToMacAddresses(String elem) {
    if (this.macAddresses == null) {
      this.macAddresses = new ArrayList<String>();
    }
    this.macAddresses.add(elem);
  }

  public List<String> getMacAddresses() {
    return this.macAddresses;
  }

  public HostID setMacAddresses(List<String> macAddresses) {
    this.macAddresses = macAddresses;
    return this;
  }

  public void unsetMacAddresses() {
    this.macAddresses = null;
  }

  /** Returns true if field macAddresses is set (has been assigned a value) and false otherwise */
  public boolean isSetMacAddresses() {
    return this.macAddresses != null;
  }

  public void setMacAddressesIsSet(boolean value) {
    if (!value) {
      this.macAddresses = null;
    }
  }

  public String getHerokuDynoID() {
    return this.herokuDynoID;
  }

  public HostID setHerokuDynoID(String herokuDynoID) {
    this.herokuDynoID = herokuDynoID;
    return this;
  }

  public void unsetHerokuDynoID() {
    this.herokuDynoID = null;
  }

  /** Returns true if field herokuDynoID is set (has been assigned a value) and false otherwise */
  public boolean isSetHerokuDynoID() {
    return this.herokuDynoID != null;
  }

  public void setHerokuDynoIDIsSet(boolean value) {
    if (!value) {
      this.herokuDynoID = null;
    }
  }

  public String getAzAppServiceInstanceID() {
    return this.azAppServiceInstanceID;
  }

  public HostID setAzAppServiceInstanceID(String azAppServiceInstanceID) {
    this.azAppServiceInstanceID = azAppServiceInstanceID;
    return this;
  }

  public void unsetAzAppServiceInstanceID() {
    this.azAppServiceInstanceID = null;
  }

  /** Returns true if field azAppServiceInstanceID is set (has been assigned a value) and false otherwise */
  public boolean isSetAzAppServiceInstanceID() {
    return this.azAppServiceInstanceID != null;
  }

  public void setAzAppServiceInstanceIDIsSet(boolean value) {
    if (!value) {
      this.azAppServiceInstanceID = null;
    }
  }

  /**
   * 
   * @see HostType
   */
  public HostType getHostType() {
    return this.hostType;
  }

  /**
   * 
   * @see HostType
   */
  public HostID setHostType(HostType hostType) {
    this.hostType = hostType;
    return this;
  }

  public void unsetHostType() {
    this.hostType = null;
  }

  /** Returns true if field hostType is set (has been assigned a value) and false otherwise */
  public boolean isSetHostType() {
    return this.hostType != null;
  }

  public void setHostTypeIsSet(boolean value) {
    if (!value) {
      this.hostType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HOSTNAME:
      if (value == null) {
        unsetHostname();
      } else {
        setHostname((String)value);
      }
      break;

    case OBSOLETE_IP_ADDRESSES:
      if (value == null) {
        unsetOBSOLETE_ip_addresses();
      } else {
        setOBSOLETE_ip_addresses((List<String>)value);
      }
      break;

    case OBSOLETE_UUID:
      if (value == null) {
        unsetOBSOLETE_uuid();
      } else {
        setOBSOLETE_uuid((String)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case EC2_INSTANCE_ID:
      if (value == null) {
        unsetEc2InstanceID();
      } else {
        setEc2InstanceID((String)value);
      }
      break;

    case EC2_AVAILABILITY_ZONE:
      if (value == null) {
        unsetEc2AvailabilityZone();
      } else {
        setEc2AvailabilityZone((String)value);
      }
      break;

    case DOCKER_CONTAINER_ID:
      if (value == null) {
        unsetDockerContainerID();
      } else {
        setDockerContainerID((String)value);
      }
      break;

    case MAC_ADDRESSES:
      if (value == null) {
        unsetMacAddresses();
      } else {
        setMacAddresses((List<String>)value);
      }
      break;

    case HEROKU_DYNO_ID:
      if (value == null) {
        unsetHerokuDynoID();
      } else {
        setHerokuDynoID((String)value);
      }
      break;

    case AZ_APP_SERVICE_INSTANCE_ID:
      if (value == null) {
        unsetAzAppServiceInstanceID();
      } else {
        setAzAppServiceInstanceID((String)value);
      }
      break;

    case HOST_TYPE:
      if (value == null) {
        unsetHostType();
      } else {
        setHostType((HostType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HOSTNAME:
      return getHostname();

    case OBSOLETE_IP_ADDRESSES:
      return getOBSOLETE_ip_addresses();

    case OBSOLETE_UUID:
      return getOBSOLETE_uuid();

    case PID:
      return getPid();

    case EC2_INSTANCE_ID:
      return getEc2InstanceID();

    case EC2_AVAILABILITY_ZONE:
      return getEc2AvailabilityZone();

    case DOCKER_CONTAINER_ID:
      return getDockerContainerID();

    case MAC_ADDRESSES:
      return getMacAddresses();

    case HEROKU_DYNO_ID:
      return getHerokuDynoID();

    case AZ_APP_SERVICE_INSTANCE_ID:
      return getAzAppServiceInstanceID();

    case HOST_TYPE:
      return getHostType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HOSTNAME:
      return isSetHostname();
    case OBSOLETE_IP_ADDRESSES:
      return isSetOBSOLETE_ip_addresses();
    case OBSOLETE_UUID:
      return isSetOBSOLETE_uuid();
    case PID:
      return isSetPid();
    case EC2_INSTANCE_ID:
      return isSetEc2InstanceID();
    case EC2_AVAILABILITY_ZONE:
      return isSetEc2AvailabilityZone();
    case DOCKER_CONTAINER_ID:
      return isSetDockerContainerID();
    case MAC_ADDRESSES:
      return isSetMacAddresses();
    case HEROKU_DYNO_ID:
      return isSetHerokuDynoID();
    case AZ_APP_SERVICE_INSTANCE_ID:
      return isSetAzAppServiceInstanceID();
    case HOST_TYPE:
      return isSetHostType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostID)
      return this.equals((HostID)that);
    return false;
  }

  public boolean equals(HostID that) {
    if (that == null)
      return false;

    boolean this_present_hostname = true && this.isSetHostname();
    boolean that_present_hostname = true && that.isSetHostname();
    if (this_present_hostname || that_present_hostname) {
      if (!(this_present_hostname && that_present_hostname))
        return false;
      if (!this.hostname.equals(that.hostname))
        return false;
    }

    boolean this_present_OBSOLETE_ip_addresses = true && this.isSetOBSOLETE_ip_addresses();
    boolean that_present_OBSOLETE_ip_addresses = true && that.isSetOBSOLETE_ip_addresses();
    if (this_present_OBSOLETE_ip_addresses || that_present_OBSOLETE_ip_addresses) {
      if (!(this_present_OBSOLETE_ip_addresses && that_present_OBSOLETE_ip_addresses))
        return false;
      if (!this.OBSOLETE_ip_addresses.equals(that.OBSOLETE_ip_addresses))
        return false;
    }

    boolean this_present_OBSOLETE_uuid = true && this.isSetOBSOLETE_uuid();
    boolean that_present_OBSOLETE_uuid = true && that.isSetOBSOLETE_uuid();
    if (this_present_OBSOLETE_uuid || that_present_OBSOLETE_uuid) {
      if (!(this_present_OBSOLETE_uuid && that_present_OBSOLETE_uuid))
        return false;
      if (!this.OBSOLETE_uuid.equals(that.OBSOLETE_uuid))
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_ec2InstanceID = true && this.isSetEc2InstanceID();
    boolean that_present_ec2InstanceID = true && that.isSetEc2InstanceID();
    if (this_present_ec2InstanceID || that_present_ec2InstanceID) {
      if (!(this_present_ec2InstanceID && that_present_ec2InstanceID))
        return false;
      if (!this.ec2InstanceID.equals(that.ec2InstanceID))
        return false;
    }

    boolean this_present_ec2AvailabilityZone = true && this.isSetEc2AvailabilityZone();
    boolean that_present_ec2AvailabilityZone = true && that.isSetEc2AvailabilityZone();
    if (this_present_ec2AvailabilityZone || that_present_ec2AvailabilityZone) {
      if (!(this_present_ec2AvailabilityZone && that_present_ec2AvailabilityZone))
        return false;
      if (!this.ec2AvailabilityZone.equals(that.ec2AvailabilityZone))
        return false;
    }

    boolean this_present_dockerContainerID = true && this.isSetDockerContainerID();
    boolean that_present_dockerContainerID = true && that.isSetDockerContainerID();
    if (this_present_dockerContainerID || that_present_dockerContainerID) {
      if (!(this_present_dockerContainerID && that_present_dockerContainerID))
        return false;
      if (!this.dockerContainerID.equals(that.dockerContainerID))
        return false;
    }

    boolean this_present_macAddresses = true && this.isSetMacAddresses();
    boolean that_present_macAddresses = true && that.isSetMacAddresses();
    if (this_present_macAddresses || that_present_macAddresses) {
      if (!(this_present_macAddresses && that_present_macAddresses))
        return false;
      if (!this.macAddresses.equals(that.macAddresses))
        return false;
    }

    boolean this_present_herokuDynoID = true && this.isSetHerokuDynoID();
    boolean that_present_herokuDynoID = true && that.isSetHerokuDynoID();
    if (this_present_herokuDynoID || that_present_herokuDynoID) {
      if (!(this_present_herokuDynoID && that_present_herokuDynoID))
        return false;
      if (!this.herokuDynoID.equals(that.herokuDynoID))
        return false;
    }

    boolean this_present_azAppServiceInstanceID = true && this.isSetAzAppServiceInstanceID();
    boolean that_present_azAppServiceInstanceID = true && that.isSetAzAppServiceInstanceID();
    if (this_present_azAppServiceInstanceID || that_present_azAppServiceInstanceID) {
      if (!(this_present_azAppServiceInstanceID && that_present_azAppServiceInstanceID))
        return false;
      if (!this.azAppServiceInstanceID.equals(that.azAppServiceInstanceID))
        return false;
    }

    boolean this_present_hostType = true && this.isSetHostType();
    boolean that_present_hostType = true && that.isSetHostType();
    if (this_present_hostType || that_present_hostType) {
      if (!(this_present_hostType && that_present_hostType))
        return false;
      if (!this.hostType.equals(that.hostType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_hostname = true && (isSetHostname());
    list.add(present_hostname);
    if (present_hostname)
      list.add(hostname);

    boolean present_OBSOLETE_ip_addresses = true && (isSetOBSOLETE_ip_addresses());
    list.add(present_OBSOLETE_ip_addresses);
    if (present_OBSOLETE_ip_addresses)
      list.add(OBSOLETE_ip_addresses);

    boolean present_OBSOLETE_uuid = true && (isSetOBSOLETE_uuid());
    list.add(present_OBSOLETE_uuid);
    if (present_OBSOLETE_uuid)
      list.add(OBSOLETE_uuid);

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_ec2InstanceID = true && (isSetEc2InstanceID());
    list.add(present_ec2InstanceID);
    if (present_ec2InstanceID)
      list.add(ec2InstanceID);

    boolean present_ec2AvailabilityZone = true && (isSetEc2AvailabilityZone());
    list.add(present_ec2AvailabilityZone);
    if (present_ec2AvailabilityZone)
      list.add(ec2AvailabilityZone);

    boolean present_dockerContainerID = true && (isSetDockerContainerID());
    list.add(present_dockerContainerID);
    if (present_dockerContainerID)
      list.add(dockerContainerID);

    boolean present_macAddresses = true && (isSetMacAddresses());
    list.add(present_macAddresses);
    if (present_macAddresses)
      list.add(macAddresses);

    boolean present_herokuDynoID = true && (isSetHerokuDynoID());
    list.add(present_herokuDynoID);
    if (present_herokuDynoID)
      list.add(herokuDynoID);

    boolean present_azAppServiceInstanceID = true && (isSetAzAppServiceInstanceID());
    list.add(present_azAppServiceInstanceID);
    if (present_azAppServiceInstanceID)
      list.add(azAppServiceInstanceID);

    boolean present_hostType = true && (isSetHostType());
    list.add(present_hostType);
    if (present_hostType)
      list.add(hostType.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(HostID other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHostname()).compareTo(other.isSetHostname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostname, other.hostname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOBSOLETE_ip_addresses()).compareTo(other.isSetOBSOLETE_ip_addresses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOBSOLETE_ip_addresses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OBSOLETE_ip_addresses, other.OBSOLETE_ip_addresses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOBSOLETE_uuid()).compareTo(other.isSetOBSOLETE_uuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOBSOLETE_uuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OBSOLETE_uuid, other.OBSOLETE_uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEc2InstanceID()).compareTo(other.isSetEc2InstanceID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEc2InstanceID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ec2InstanceID, other.ec2InstanceID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEc2AvailabilityZone()).compareTo(other.isSetEc2AvailabilityZone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEc2AvailabilityZone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ec2AvailabilityZone, other.ec2AvailabilityZone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDockerContainerID()).compareTo(other.isSetDockerContainerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDockerContainerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dockerContainerID, other.dockerContainerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMacAddresses()).compareTo(other.isSetMacAddresses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMacAddresses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.macAddresses, other.macAddresses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHerokuDynoID()).compareTo(other.isSetHerokuDynoID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHerokuDynoID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.herokuDynoID, other.herokuDynoID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAzAppServiceInstanceID()).compareTo(other.isSetAzAppServiceInstanceID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAzAppServiceInstanceID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.azAppServiceInstanceID, other.azAppServiceInstanceID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostType()).compareTo(other.isSetHostType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostType, other.hostType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostID(");
    boolean first = true;

    sb.append("hostname:");
    if (this.hostname == null) {
      sb.append("null");
    } else {
      sb.append(this.hostname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("OBSOLETE_ip_addresses:");
    if (this.OBSOLETE_ip_addresses == null) {
      sb.append("null");
    } else {
      sb.append(this.OBSOLETE_ip_addresses);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("OBSOLETE_uuid:");
    if (this.OBSOLETE_uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.OBSOLETE_uuid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ec2InstanceID:");
    if (this.ec2InstanceID == null) {
      sb.append("null");
    } else {
      sb.append(this.ec2InstanceID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ec2AvailabilityZone:");
    if (this.ec2AvailabilityZone == null) {
      sb.append("null");
    } else {
      sb.append(this.ec2AvailabilityZone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dockerContainerID:");
    if (this.dockerContainerID == null) {
      sb.append("null");
    } else {
      sb.append(this.dockerContainerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("macAddresses:");
    if (this.macAddresses == null) {
      sb.append("null");
    } else {
      sb.append(this.macAddresses);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("herokuDynoID:");
    if (this.herokuDynoID == null) {
      sb.append("null");
    } else {
      sb.append(this.herokuDynoID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("azAppServiceInstanceID:");
    if (this.azAppServiceInstanceID == null) {
      sb.append("null");
    } else {
      sb.append(this.azAppServiceInstanceID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostType:");
    if (this.hostType == null) {
      sb.append("null");
    } else {
      sb.append(this.hostType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostIDStandardSchemeFactory implements SchemeFactory {
    public HostIDStandardScheme getScheme() {
      return new HostIDStandardScheme();
    }
  }

  private static class HostIDStandardScheme extends StandardScheme<HostID> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostID struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOSTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostname = iprot.readString();
              struct.setHostnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OBSOLETE_IP_ADDRESSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.OBSOLETE_ip_addresses = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.OBSOLETE_ip_addresses.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setOBSOLETE_ip_addressesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OBSOLETE_UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.OBSOLETE_uuid = iprot.readString();
              struct.setOBSOLETE_uuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EC2_INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ec2InstanceID = iprot.readString();
              struct.setEc2InstanceIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EC2_AVAILABILITY_ZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ec2AvailabilityZone = iprot.readString();
              struct.setEc2AvailabilityZoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DOCKER_CONTAINER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dockerContainerID = iprot.readString();
              struct.setDockerContainerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAC_ADDRESSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.macAddresses = new ArrayList<String>(_list3.size);
                String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.macAddresses.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setMacAddressesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HEROKU_DYNO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.herokuDynoID = iprot.readString();
              struct.setHerokuDynoIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // AZ_APP_SERVICE_INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.azAppServiceInstanceID = iprot.readString();
              struct.setAzAppServiceInstanceIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HOST_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hostType = com.appoptics.ext.thriftgenerated.HostType.findByValue(iprot.readI32());
              struct.setHostTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostID struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hostname != null) {
        oprot.writeFieldBegin(HOSTNAME_FIELD_DESC);
        oprot.writeString(struct.hostname);
        oprot.writeFieldEnd();
      }
      if (struct.OBSOLETE_ip_addresses != null) {
        oprot.writeFieldBegin(OBSOLETE_IP_ADDRESSES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.OBSOLETE_ip_addresses.size()));
          for (String _iter6 : struct.OBSOLETE_ip_addresses)
          {
            oprot.writeString(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.OBSOLETE_uuid != null) {
        oprot.writeFieldBegin(OBSOLETE_UUID_FIELD_DESC);
        oprot.writeString(struct.OBSOLETE_uuid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.ec2InstanceID != null) {
        oprot.writeFieldBegin(EC2_INSTANCE_ID_FIELD_DESC);
        oprot.writeString(struct.ec2InstanceID);
        oprot.writeFieldEnd();
      }
      if (struct.ec2AvailabilityZone != null) {
        oprot.writeFieldBegin(EC2_AVAILABILITY_ZONE_FIELD_DESC);
        oprot.writeString(struct.ec2AvailabilityZone);
        oprot.writeFieldEnd();
      }
      if (struct.dockerContainerID != null) {
        oprot.writeFieldBegin(DOCKER_CONTAINER_ID_FIELD_DESC);
        oprot.writeString(struct.dockerContainerID);
        oprot.writeFieldEnd();
      }
      if (struct.macAddresses != null) {
        oprot.writeFieldBegin(MAC_ADDRESSES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.macAddresses.size()));
          for (String _iter7 : struct.macAddresses)
          {
            oprot.writeString(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.herokuDynoID != null) {
        oprot.writeFieldBegin(HEROKU_DYNO_ID_FIELD_DESC);
        oprot.writeString(struct.herokuDynoID);
        oprot.writeFieldEnd();
      }
      if (struct.azAppServiceInstanceID != null) {
        oprot.writeFieldBegin(AZ_APP_SERVICE_INSTANCE_ID_FIELD_DESC);
        oprot.writeString(struct.azAppServiceInstanceID);
        oprot.writeFieldEnd();
      }
      if (struct.hostType != null) {
        oprot.writeFieldBegin(HOST_TYPE_FIELD_DESC);
        oprot.writeI32(struct.hostType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostIDTupleSchemeFactory implements SchemeFactory {
    public HostIDTupleScheme getScheme() {
      return new HostIDTupleScheme();
    }
  }

  private static class HostIDTupleScheme extends TupleScheme<HostID> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostID struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHostname()) {
        optionals.set(0);
      }
      if (struct.isSetOBSOLETE_ip_addresses()) {
        optionals.set(1);
      }
      if (struct.isSetOBSOLETE_uuid()) {
        optionals.set(2);
      }
      if (struct.isSetPid()) {
        optionals.set(3);
      }
      if (struct.isSetEc2InstanceID()) {
        optionals.set(4);
      }
      if (struct.isSetEc2AvailabilityZone()) {
        optionals.set(5);
      }
      if (struct.isSetDockerContainerID()) {
        optionals.set(6);
      }
      if (struct.isSetMacAddresses()) {
        optionals.set(7);
      }
      if (struct.isSetHerokuDynoID()) {
        optionals.set(8);
      }
      if (struct.isSetAzAppServiceInstanceID()) {
        optionals.set(9);
      }
      if (struct.isSetHostType()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetHostname()) {
        oprot.writeString(struct.hostname);
      }
      if (struct.isSetOBSOLETE_ip_addresses()) {
        {
          oprot.writeI32(struct.OBSOLETE_ip_addresses.size());
          for (String _iter8 : struct.OBSOLETE_ip_addresses)
          {
            oprot.writeString(_iter8);
          }
        }
      }
      if (struct.isSetOBSOLETE_uuid()) {
        oprot.writeString(struct.OBSOLETE_uuid);
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetEc2InstanceID()) {
        oprot.writeString(struct.ec2InstanceID);
      }
      if (struct.isSetEc2AvailabilityZone()) {
        oprot.writeString(struct.ec2AvailabilityZone);
      }
      if (struct.isSetDockerContainerID()) {
        oprot.writeString(struct.dockerContainerID);
      }
      if (struct.isSetMacAddresses()) {
        {
          oprot.writeI32(struct.macAddresses.size());
          for (String _iter9 : struct.macAddresses)
          {
            oprot.writeString(_iter9);
          }
        }
      }
      if (struct.isSetHerokuDynoID()) {
        oprot.writeString(struct.herokuDynoID);
      }
      if (struct.isSetAzAppServiceInstanceID()) {
        oprot.writeString(struct.azAppServiceInstanceID);
      }
      if (struct.isSetHostType()) {
        oprot.writeI32(struct.hostType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostID struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.hostname = iprot.readString();
        struct.setHostnameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.OBSOLETE_ip_addresses = new ArrayList<String>(_list10.size);
          String _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = iprot.readString();
            struct.OBSOLETE_ip_addresses.add(_elem11);
          }
        }
        struct.setOBSOLETE_ip_addressesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.OBSOLETE_uuid = iprot.readString();
        struct.setOBSOLETE_uuidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ec2InstanceID = iprot.readString();
        struct.setEc2InstanceIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ec2AvailabilityZone = iprot.readString();
        struct.setEc2AvailabilityZoneIsSet(true);
      }
      if (incoming.get(6)) {
        struct.dockerContainerID = iprot.readString();
        struct.setDockerContainerIDIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.macAddresses = new ArrayList<String>(_list13.size);
          String _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readString();
            struct.macAddresses.add(_elem14);
          }
        }
        struct.setMacAddressesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.herokuDynoID = iprot.readString();
        struct.setHerokuDynoIDIsSet(true);
      }
      if (incoming.get(9)) {
        struct.azAppServiceInstanceID = iprot.readString();
        struct.setAzAppServiceInstanceIDIsSet(true);
      }
      if (incoming.get(10)) {
        struct.hostType = com.appoptics.ext.thriftgenerated.HostType.findByValue(iprot.readI32());
        struct.setHostTypeIsSet(true);
      }
    }
  }

}

