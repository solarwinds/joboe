/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.appoptics.ext.thriftgenerated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2020-11-10")
public class Collector {

  public interface Iface {

    public ResultMessage postEvents(String apiKey, List<ByteBuffer> messages, EncodingType enc, HostID identity) throws org.apache.thrift.TException;

    public ResultMessage postMetrics(String apiKey, List<ByteBuffer> messages, EncodingType enc, HostID identity) throws org.apache.thrift.TException;

    public ResultMessage postStatus(String apiKey, List<ByteBuffer> messages, EncodingType enc, HostID identity) throws org.apache.thrift.TException;

    public ResultMessage ping(String apiKey) throws org.apache.thrift.TException;

    public SettingsResult getSettings(String apiKey, HostID identity, String tracelyzerVersion) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void postEvents(String apiKey, List<ByteBuffer> messages, EncodingType enc, HostID identity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postMetrics(String apiKey, List<ByteBuffer> messages, EncodingType enc, HostID identity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postStatus(String apiKey, List<ByteBuffer> messages, EncodingType enc, HostID identity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ping(String apiKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSettings(String apiKey, HostID identity, String tracelyzerVersion, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ResultMessage postEvents(String apiKey, List<ByteBuffer> messages, EncodingType enc, HostID identity) throws org.apache.thrift.TException
    {
      send_postEvents(apiKey, messages, enc, identity);
      return recv_postEvents();
    }

    public void send_postEvents(String apiKey, List<ByteBuffer> messages, EncodingType enc, HostID identity) throws org.apache.thrift.TException
    {
      postEvents_args args = new postEvents_args();
      args.setApiKey(apiKey);
      args.setMessages(messages);
      args.setEnc(enc);
      args.setIdentity(identity);
      sendBase("postEvents", args);
    }

    public ResultMessage recv_postEvents() throws org.apache.thrift.TException
    {
      postEvents_result result = new postEvents_result();
      receiveBase(result, "postEvents");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postEvents failed: unknown result");
    }

    public ResultMessage postMetrics(String apiKey, List<ByteBuffer> messages, EncodingType enc, HostID identity) throws org.apache.thrift.TException
    {
      send_postMetrics(apiKey, messages, enc, identity);
      return recv_postMetrics();
    }

    public void send_postMetrics(String apiKey, List<ByteBuffer> messages, EncodingType enc, HostID identity) throws org.apache.thrift.TException
    {
      postMetrics_args args = new postMetrics_args();
      args.setApiKey(apiKey);
      args.setMessages(messages);
      args.setEnc(enc);
      args.setIdentity(identity);
      sendBase("postMetrics", args);
    }

    public ResultMessage recv_postMetrics() throws org.apache.thrift.TException
    {
      postMetrics_result result = new postMetrics_result();
      receiveBase(result, "postMetrics");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postMetrics failed: unknown result");
    }

    public ResultMessage postStatus(String apiKey, List<ByteBuffer> messages, EncodingType enc, HostID identity) throws org.apache.thrift.TException
    {
      send_postStatus(apiKey, messages, enc, identity);
      return recv_postStatus();
    }

    public void send_postStatus(String apiKey, List<ByteBuffer> messages, EncodingType enc, HostID identity) throws org.apache.thrift.TException
    {
      postStatus_args args = new postStatus_args();
      args.setApiKey(apiKey);
      args.setMessages(messages);
      args.setEnc(enc);
      args.setIdentity(identity);
      sendBase("postStatus", args);
    }

    public ResultMessage recv_postStatus() throws org.apache.thrift.TException
    {
      postStatus_result result = new postStatus_result();
      receiveBase(result, "postStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postStatus failed: unknown result");
    }

    public ResultMessage ping(String apiKey) throws org.apache.thrift.TException
    {
      send_ping(apiKey);
      return recv_ping();
    }

    public void send_ping(String apiKey) throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      args.setApiKey(apiKey);
      sendBase("ping", args);
    }

    public ResultMessage recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

    public SettingsResult getSettings(String apiKey, HostID identity, String tracelyzerVersion) throws org.apache.thrift.TException
    {
      send_getSettings(apiKey, identity, tracelyzerVersion);
      return recv_getSettings();
    }

    public void send_getSettings(String apiKey, HostID identity, String tracelyzerVersion) throws org.apache.thrift.TException
    {
      getSettings_args args = new getSettings_args();
      args.setApiKey(apiKey);
      args.setIdentity(identity);
      args.setTracelyzerVersion(tracelyzerVersion);
      sendBase("getSettings", args);
    }

    public SettingsResult recv_getSettings() throws org.apache.thrift.TException
    {
      getSettings_result result = new getSettings_result();
      receiveBase(result, "getSettings");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSettings failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void postEvents(String apiKey, List<ByteBuffer> messages, EncodingType enc, HostID identity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postEvents_call method_call = new postEvents_call(apiKey, messages, enc, identity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postEvents_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String apiKey;
      private List<ByteBuffer> messages;
      private EncodingType enc;
      private HostID identity;
      public postEvents_call(String apiKey, List<ByteBuffer> messages, EncodingType enc, HostID identity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.apiKey = apiKey;
        this.messages = messages;
        this.enc = enc;
        this.identity = identity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postEvents", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postEvents_args args = new postEvents_args();
        args.setApiKey(apiKey);
        args.setMessages(messages);
        args.setEnc(enc);
        args.setIdentity(identity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultMessage getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postEvents();
      }
    }

    public void postMetrics(String apiKey, List<ByteBuffer> messages, EncodingType enc, HostID identity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postMetrics_call method_call = new postMetrics_call(apiKey, messages, enc, identity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postMetrics_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String apiKey;
      private List<ByteBuffer> messages;
      private EncodingType enc;
      private HostID identity;
      public postMetrics_call(String apiKey, List<ByteBuffer> messages, EncodingType enc, HostID identity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.apiKey = apiKey;
        this.messages = messages;
        this.enc = enc;
        this.identity = identity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postMetrics", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postMetrics_args args = new postMetrics_args();
        args.setApiKey(apiKey);
        args.setMessages(messages);
        args.setEnc(enc);
        args.setIdentity(identity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultMessage getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postMetrics();
      }
    }

    public void postStatus(String apiKey, List<ByteBuffer> messages, EncodingType enc, HostID identity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postStatus_call method_call = new postStatus_call(apiKey, messages, enc, identity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String apiKey;
      private List<ByteBuffer> messages;
      private EncodingType enc;
      private HostID identity;
      public postStatus_call(String apiKey, List<ByteBuffer> messages, EncodingType enc, HostID identity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.apiKey = apiKey;
        this.messages = messages;
        this.enc = enc;
        this.identity = identity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postStatus_args args = new postStatus_args();
        args.setApiKey(apiKey);
        args.setMessages(messages);
        args.setEnc(enc);
        args.setIdentity(identity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultMessage getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postStatus();
      }
    }

    public void ping(String apiKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(apiKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String apiKey;
      public ping_call(String apiKey, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.apiKey = apiKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.setApiKey(apiKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultMessage getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

    public void getSettings(String apiKey, HostID identity, String tracelyzerVersion, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSettings_call method_call = new getSettings_call(apiKey, identity, tracelyzerVersion, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSettings_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String apiKey;
      private HostID identity;
      private String tracelyzerVersion;
      public getSettings_call(String apiKey, HostID identity, String tracelyzerVersion, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.apiKey = apiKey;
        this.identity = identity;
        this.tracelyzerVersion = tracelyzerVersion;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSettings", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSettings_args args = new getSettings_args();
        args.setApiKey(apiKey);
        args.setIdentity(identity);
        args.setTracelyzerVersion(tracelyzerVersion);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SettingsResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSettings();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("postEvents", new postEvents());
      processMap.put("postMetrics", new postMetrics());
      processMap.put("postStatus", new postStatus());
      processMap.put("ping", new ping());
      processMap.put("getSettings", new getSettings());
      return processMap;
    }

    public static class postEvents<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postEvents_args> {
      public postEvents() {
        super("postEvents");
      }

      public postEvents_args getEmptyArgsInstance() {
        return new postEvents_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postEvents_result getResult(I iface, postEvents_args args) throws org.apache.thrift.TException {
        postEvents_result result = new postEvents_result();
        result.success = iface.postEvents(args.apiKey, args.messages, args.enc, args.identity);
        return result;
      }
    }

    public static class postMetrics<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postMetrics_args> {
      public postMetrics() {
        super("postMetrics");
      }

      public postMetrics_args getEmptyArgsInstance() {
        return new postMetrics_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postMetrics_result getResult(I iface, postMetrics_args args) throws org.apache.thrift.TException {
        postMetrics_result result = new postMetrics_result();
        result.success = iface.postMetrics(args.apiKey, args.messages, args.enc, args.identity);
        return result;
      }
    }

    public static class postStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postStatus_args> {
      public postStatus() {
        super("postStatus");
      }

      public postStatus_args getEmptyArgsInstance() {
        return new postStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postStatus_result getResult(I iface, postStatus_args args) throws org.apache.thrift.TException {
        postStatus_result result = new postStatus_result();
        result.success = iface.postStatus(args.apiKey, args.messages, args.enc, args.identity);
        return result;
      }
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        result.success = iface.ping(args.apiKey);
        return result;
      }
    }

    public static class getSettings<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSettings_args> {
      public getSettings() {
        super("getSettings");
      }

      public getSettings_args getEmptyArgsInstance() {
        return new getSettings_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSettings_result getResult(I iface, getSettings_args args) throws org.apache.thrift.TException {
        getSettings_result result = new getSettings_result();
        result.success = iface.getSettings(args.apiKey, args.identity, args.tracelyzerVersion);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("postEvents", new postEvents());
      processMap.put("postMetrics", new postMetrics());
      processMap.put("postStatus", new postStatus());
      processMap.put("ping", new ping());
      processMap.put("getSettings", new getSettings());
      return processMap;
    }

    public static class postEvents<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postEvents_args, ResultMessage> {
      public postEvents() {
        super("postEvents");
      }

      public postEvents_args getEmptyArgsInstance() {
        return new postEvents_args();
      }

      public AsyncMethodCallback<ResultMessage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultMessage>() { 
          public void onComplete(ResultMessage o) {
            postEvents_result result = new postEvents_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postEvents_result result = new postEvents_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postEvents_args args, org.apache.thrift.async.AsyncMethodCallback<ResultMessage> resultHandler) throws TException {
        iface.postEvents(args.apiKey, args.messages, args.enc, args.identity,resultHandler);
      }
    }

    public static class postMetrics<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postMetrics_args, ResultMessage> {
      public postMetrics() {
        super("postMetrics");
      }

      public postMetrics_args getEmptyArgsInstance() {
        return new postMetrics_args();
      }

      public AsyncMethodCallback<ResultMessage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultMessage>() { 
          public void onComplete(ResultMessage o) {
            postMetrics_result result = new postMetrics_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postMetrics_result result = new postMetrics_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postMetrics_args args, org.apache.thrift.async.AsyncMethodCallback<ResultMessage> resultHandler) throws TException {
        iface.postMetrics(args.apiKey, args.messages, args.enc, args.identity,resultHandler);
      }
    }

    public static class postStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postStatus_args, ResultMessage> {
      public postStatus() {
        super("postStatus");
      }

      public postStatus_args getEmptyArgsInstance() {
        return new postStatus_args();
      }

      public AsyncMethodCallback<ResultMessage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultMessage>() { 
          public void onComplete(ResultMessage o) {
            postStatus_result result = new postStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postStatus_result result = new postStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postStatus_args args, org.apache.thrift.async.AsyncMethodCallback<ResultMessage> resultHandler) throws TException {
        iface.postStatus(args.apiKey, args.messages, args.enc, args.identity,resultHandler);
      }
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, ResultMessage> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public AsyncMethodCallback<ResultMessage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultMessage>() { 
          public void onComplete(ResultMessage o) {
            ping_result result = new ping_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ping_result result = new ping_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<ResultMessage> resultHandler) throws TException {
        iface.ping(args.apiKey,resultHandler);
      }
    }

    public static class getSettings<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSettings_args, SettingsResult> {
      public getSettings() {
        super("getSettings");
      }

      public getSettings_args getEmptyArgsInstance() {
        return new getSettings_args();
      }

      public AsyncMethodCallback<SettingsResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SettingsResult>() { 
          public void onComplete(SettingsResult o) {
            getSettings_result result = new getSettings_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSettings_result result = new getSettings_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSettings_args args, org.apache.thrift.async.AsyncMethodCallback<SettingsResult> resultHandler) throws TException {
        iface.getSettings(args.apiKey, args.identity, args.tracelyzerVersion,resultHandler);
      }
    }

  }

  public static class postEvents_args implements org.apache.thrift.TBase<postEvents_args, postEvents_args._Fields>, java.io.Serializable, Cloneable, Comparable<postEvents_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postEvents_args");

    private static final org.apache.thrift.protocol.TField API_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("apiKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField ENC_FIELD_DESC = new org.apache.thrift.protocol.TField("enc", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField IDENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("identity", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postEvents_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postEvents_argsTupleSchemeFactory());
    }

    public String apiKey; // required
    public List<ByteBuffer> messages; // required
    /**
     * 
     * @see EncodingType
     */
    public EncodingType enc; // required
    public HostID identity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      API_KEY((short)1, "apiKey"),
      MESSAGES((short)2, "messages"),
      /**
       * 
       * @see EncodingType
       */
      ENC((short)3, "enc"),
      IDENTITY((short)4, "identity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // API_KEY
            return API_KEY;
          case 2: // MESSAGES
            return MESSAGES;
          case 3: // ENC
            return ENC;
          case 4: // IDENTITY
            return IDENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.API_KEY, new org.apache.thrift.meta_data.FieldMetaData("apiKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      tmpMap.put(_Fields.ENC, new org.apache.thrift.meta_data.FieldMetaData("enc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EncodingType.class)));
      tmpMap.put(_Fields.IDENTITY, new org.apache.thrift.meta_data.FieldMetaData("identity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postEvents_args.class, metaDataMap);
    }

    public postEvents_args() {
    }

    public postEvents_args(
      String apiKey,
      List<ByteBuffer> messages,
      EncodingType enc,
      HostID identity)
    {
      this();
      this.apiKey = apiKey;
      this.messages = messages;
      this.enc = enc;
      this.identity = identity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postEvents_args(postEvents_args other) {
      if (other.isSetApiKey()) {
        this.apiKey = other.apiKey;
      }
      if (other.isSetMessages()) {
        List<ByteBuffer> __this__messages = new ArrayList<ByteBuffer>(other.messages);
        this.messages = __this__messages;
      }
      if (other.isSetEnc()) {
        this.enc = other.enc;
      }
      if (other.isSetIdentity()) {
        this.identity = new HostID(other.identity);
      }
    }

    public postEvents_args deepCopy() {
      return new postEvents_args(this);
    }

    @Override
    public void clear() {
      this.apiKey = null;
      this.messages = null;
      this.enc = null;
      this.identity = null;
    }

    public String getApiKey() {
      return this.apiKey;
    }

    public postEvents_args setApiKey(String apiKey) {
      this.apiKey = apiKey;
      return this;
    }

    public void unsetApiKey() {
      this.apiKey = null;
    }

    /** Returns true if field apiKey is set (has been assigned a value) and false otherwise */
    public boolean isSetApiKey() {
      return this.apiKey != null;
    }

    public void setApiKeyIsSet(boolean value) {
      if (!value) {
        this.apiKey = null;
      }
    }

    public int getMessagesSize() {
      return (this.messages == null) ? 0 : this.messages.size();
    }

    public java.util.Iterator<ByteBuffer> getMessagesIterator() {
      return (this.messages == null) ? null : this.messages.iterator();
    }

    public void addToMessages(ByteBuffer elem) {
      if (this.messages == null) {
        this.messages = new ArrayList<ByteBuffer>();
      }
      this.messages.add(elem);
    }

    public List<ByteBuffer> getMessages() {
      return this.messages;
    }

    public postEvents_args setMessages(List<ByteBuffer> messages) {
      this.messages = messages;
      return this;
    }

    public void unsetMessages() {
      this.messages = null;
    }

    /** Returns true if field messages is set (has been assigned a value) and false otherwise */
    public boolean isSetMessages() {
      return this.messages != null;
    }

    public void setMessagesIsSet(boolean value) {
      if (!value) {
        this.messages = null;
      }
    }

    /**
     * 
     * @see EncodingType
     */
    public EncodingType getEnc() {
      return this.enc;
    }

    /**
     * 
     * @see EncodingType
     */
    public postEvents_args setEnc(EncodingType enc) {
      this.enc = enc;
      return this;
    }

    public void unsetEnc() {
      this.enc = null;
    }

    /** Returns true if field enc is set (has been assigned a value) and false otherwise */
    public boolean isSetEnc() {
      return this.enc != null;
    }

    public void setEncIsSet(boolean value) {
      if (!value) {
        this.enc = null;
      }
    }

    public HostID getIdentity() {
      return this.identity;
    }

    public postEvents_args setIdentity(HostID identity) {
      this.identity = identity;
      return this;
    }

    public void unsetIdentity() {
      this.identity = null;
    }

    /** Returns true if field identity is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentity() {
      return this.identity != null;
    }

    public void setIdentityIsSet(boolean value) {
      if (!value) {
        this.identity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case API_KEY:
        if (value == null) {
          unsetApiKey();
        } else {
          setApiKey((String)value);
        }
        break;

      case MESSAGES:
        if (value == null) {
          unsetMessages();
        } else {
          setMessages((List<ByteBuffer>)value);
        }
        break;

      case ENC:
        if (value == null) {
          unsetEnc();
        } else {
          setEnc((EncodingType)value);
        }
        break;

      case IDENTITY:
        if (value == null) {
          unsetIdentity();
        } else {
          setIdentity((HostID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case API_KEY:
        return getApiKey();

      case MESSAGES:
        return getMessages();

      case ENC:
        return getEnc();

      case IDENTITY:
        return getIdentity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case API_KEY:
        return isSetApiKey();
      case MESSAGES:
        return isSetMessages();
      case ENC:
        return isSetEnc();
      case IDENTITY:
        return isSetIdentity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postEvents_args)
        return this.equals((postEvents_args)that);
      return false;
    }

    public boolean equals(postEvents_args that) {
      if (that == null)
        return false;

      boolean this_present_apiKey = true && this.isSetApiKey();
      boolean that_present_apiKey = true && that.isSetApiKey();
      if (this_present_apiKey || that_present_apiKey) {
        if (!(this_present_apiKey && that_present_apiKey))
          return false;
        if (!this.apiKey.equals(that.apiKey))
          return false;
      }

      boolean this_present_messages = true && this.isSetMessages();
      boolean that_present_messages = true && that.isSetMessages();
      if (this_present_messages || that_present_messages) {
        if (!(this_present_messages && that_present_messages))
          return false;
        if (!this.messages.equals(that.messages))
          return false;
      }

      boolean this_present_enc = true && this.isSetEnc();
      boolean that_present_enc = true && that.isSetEnc();
      if (this_present_enc || that_present_enc) {
        if (!(this_present_enc && that_present_enc))
          return false;
        if (!this.enc.equals(that.enc))
          return false;
      }

      boolean this_present_identity = true && this.isSetIdentity();
      boolean that_present_identity = true && that.isSetIdentity();
      if (this_present_identity || that_present_identity) {
        if (!(this_present_identity && that_present_identity))
          return false;
        if (!this.identity.equals(that.identity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_apiKey = true && (isSetApiKey());
      list.add(present_apiKey);
      if (present_apiKey)
        list.add(apiKey);

      boolean present_messages = true && (isSetMessages());
      list.add(present_messages);
      if (present_messages)
        list.add(messages);

      boolean present_enc = true && (isSetEnc());
      list.add(present_enc);
      if (present_enc)
        list.add(enc.getValue());

      boolean present_identity = true && (isSetIdentity());
      list.add(present_identity);
      if (present_identity)
        list.add(identity);

      return list.hashCode();
    }

    @Override
    public int compareTo(postEvents_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApiKey()).compareTo(other.isSetApiKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApiKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiKey, other.apiKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessages()).compareTo(other.isSetMessages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnc()).compareTo(other.isSetEnc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enc, other.enc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdentity()).compareTo(other.isSetIdentity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identity, other.identity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postEvents_args(");
      boolean first = true;

      sb.append("apiKey:");
      if (this.apiKey == null) {
        sb.append("null");
      } else {
        sb.append(this.apiKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messages:");
      if (this.messages == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.messages, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("enc:");
      if (this.enc == null) {
        sb.append("null");
      } else {
        sb.append(this.enc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("identity:");
      if (this.identity == null) {
        sb.append("null");
      } else {
        sb.append(this.identity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (identity != null) {
        identity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postEvents_argsStandardSchemeFactory implements SchemeFactory {
      public postEvents_argsStandardScheme getScheme() {
        return new postEvents_argsStandardScheme();
      }
    }

    private static class postEvents_argsStandardScheme extends StandardScheme<postEvents_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postEvents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // API_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.apiKey = iprot.readString();
                struct.setApiKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MESSAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                  struct.messages = new ArrayList<ByteBuffer>(_list34.size);
                  ByteBuffer _elem35;
                  for (int _i36 = 0; _i36 < _list34.size; ++_i36)
                  {
                    _elem35 = iprot.readBinary();
                    struct.messages.add(_elem35);
                  }
                  iprot.readListEnd();
                }
                struct.setMessagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENC
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.enc = com.appoptics.ext.thriftgenerated.EncodingType.findByValue(iprot.readI32());
                struct.setEncIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // IDENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.identity = new HostID();
                struct.identity.read(iprot);
                struct.setIdentityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postEvents_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.apiKey != null) {
          oprot.writeFieldBegin(API_KEY_FIELD_DESC);
          oprot.writeString(struct.apiKey);
          oprot.writeFieldEnd();
        }
        if (struct.messages != null) {
          oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.messages.size()));
            for (ByteBuffer _iter37 : struct.messages)
            {
              oprot.writeBinary(_iter37);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.enc != null) {
          oprot.writeFieldBegin(ENC_FIELD_DESC);
          oprot.writeI32(struct.enc.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.identity != null) {
          oprot.writeFieldBegin(IDENTITY_FIELD_DESC);
          struct.identity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postEvents_argsTupleSchemeFactory implements SchemeFactory {
      public postEvents_argsTupleScheme getScheme() {
        return new postEvents_argsTupleScheme();
      }
    }

    private static class postEvents_argsTupleScheme extends TupleScheme<postEvents_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postEvents_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApiKey()) {
          optionals.set(0);
        }
        if (struct.isSetMessages()) {
          optionals.set(1);
        }
        if (struct.isSetEnc()) {
          optionals.set(2);
        }
        if (struct.isSetIdentity()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetApiKey()) {
          oprot.writeString(struct.apiKey);
        }
        if (struct.isSetMessages()) {
          {
            oprot.writeI32(struct.messages.size());
            for (ByteBuffer _iter38 : struct.messages)
            {
              oprot.writeBinary(_iter38);
            }
          }
        }
        if (struct.isSetEnc()) {
          oprot.writeI32(struct.enc.getValue());
        }
        if (struct.isSetIdentity()) {
          struct.identity.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postEvents_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.apiKey = iprot.readString();
          struct.setApiKeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.messages = new ArrayList<ByteBuffer>(_list39.size);
            ByteBuffer _elem40;
            for (int _i41 = 0; _i41 < _list39.size; ++_i41)
            {
              _elem40 = iprot.readBinary();
              struct.messages.add(_elem40);
            }
          }
          struct.setMessagesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.enc = com.appoptics.ext.thriftgenerated.EncodingType.findByValue(iprot.readI32());
          struct.setEncIsSet(true);
        }
        if (incoming.get(3)) {
          struct.identity = new HostID();
          struct.identity.read(iprot);
          struct.setIdentityIsSet(true);
        }
      }
    }

  }

  public static class postEvents_result implements org.apache.thrift.TBase<postEvents_result, postEvents_result._Fields>, java.io.Serializable, Cloneable, Comparable<postEvents_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postEvents_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postEvents_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postEvents_resultTupleSchemeFactory());
    }

    public ResultMessage success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postEvents_result.class, metaDataMap);
    }

    public postEvents_result() {
    }

    public postEvents_result(
      ResultMessage success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postEvents_result(postEvents_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultMessage(other.success);
      }
    }

    public postEvents_result deepCopy() {
      return new postEvents_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultMessage getSuccess() {
      return this.success;
    }

    public postEvents_result setSuccess(ResultMessage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postEvents_result)
        return this.equals((postEvents_result)that);
      return false;
    }

    public boolean equals(postEvents_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postEvents_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postEvents_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postEvents_resultStandardSchemeFactory implements SchemeFactory {
      public postEvents_resultStandardScheme getScheme() {
        return new postEvents_resultStandardScheme();
      }
    }

    private static class postEvents_resultStandardScheme extends StandardScheme<postEvents_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postEvents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultMessage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postEvents_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postEvents_resultTupleSchemeFactory implements SchemeFactory {
      public postEvents_resultTupleScheme getScheme() {
        return new postEvents_resultTupleScheme();
      }
    }

    private static class postEvents_resultTupleScheme extends TupleScheme<postEvents_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postEvents_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postEvents_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultMessage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postMetrics_args implements org.apache.thrift.TBase<postMetrics_args, postMetrics_args._Fields>, java.io.Serializable, Cloneable, Comparable<postMetrics_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postMetrics_args");

    private static final org.apache.thrift.protocol.TField API_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("apiKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField ENC_FIELD_DESC = new org.apache.thrift.protocol.TField("enc", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField IDENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("identity", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postMetrics_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postMetrics_argsTupleSchemeFactory());
    }

    public String apiKey; // required
    public List<ByteBuffer> messages; // required
    /**
     * 
     * @see EncodingType
     */
    public EncodingType enc; // required
    public HostID identity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      API_KEY((short)1, "apiKey"),
      MESSAGES((short)2, "messages"),
      /**
       * 
       * @see EncodingType
       */
      ENC((short)3, "enc"),
      IDENTITY((short)4, "identity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // API_KEY
            return API_KEY;
          case 2: // MESSAGES
            return MESSAGES;
          case 3: // ENC
            return ENC;
          case 4: // IDENTITY
            return IDENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.API_KEY, new org.apache.thrift.meta_data.FieldMetaData("apiKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      tmpMap.put(_Fields.ENC, new org.apache.thrift.meta_data.FieldMetaData("enc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EncodingType.class)));
      tmpMap.put(_Fields.IDENTITY, new org.apache.thrift.meta_data.FieldMetaData("identity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postMetrics_args.class, metaDataMap);
    }

    public postMetrics_args() {
    }

    public postMetrics_args(
      String apiKey,
      List<ByteBuffer> messages,
      EncodingType enc,
      HostID identity)
    {
      this();
      this.apiKey = apiKey;
      this.messages = messages;
      this.enc = enc;
      this.identity = identity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postMetrics_args(postMetrics_args other) {
      if (other.isSetApiKey()) {
        this.apiKey = other.apiKey;
      }
      if (other.isSetMessages()) {
        List<ByteBuffer> __this__messages = new ArrayList<ByteBuffer>(other.messages);
        this.messages = __this__messages;
      }
      if (other.isSetEnc()) {
        this.enc = other.enc;
      }
      if (other.isSetIdentity()) {
        this.identity = new HostID(other.identity);
      }
    }

    public postMetrics_args deepCopy() {
      return new postMetrics_args(this);
    }

    @Override
    public void clear() {
      this.apiKey = null;
      this.messages = null;
      this.enc = null;
      this.identity = null;
    }

    public String getApiKey() {
      return this.apiKey;
    }

    public postMetrics_args setApiKey(String apiKey) {
      this.apiKey = apiKey;
      return this;
    }

    public void unsetApiKey() {
      this.apiKey = null;
    }

    /** Returns true if field apiKey is set (has been assigned a value) and false otherwise */
    public boolean isSetApiKey() {
      return this.apiKey != null;
    }

    public void setApiKeyIsSet(boolean value) {
      if (!value) {
        this.apiKey = null;
      }
    }

    public int getMessagesSize() {
      return (this.messages == null) ? 0 : this.messages.size();
    }

    public java.util.Iterator<ByteBuffer> getMessagesIterator() {
      return (this.messages == null) ? null : this.messages.iterator();
    }

    public void addToMessages(ByteBuffer elem) {
      if (this.messages == null) {
        this.messages = new ArrayList<ByteBuffer>();
      }
      this.messages.add(elem);
    }

    public List<ByteBuffer> getMessages() {
      return this.messages;
    }

    public postMetrics_args setMessages(List<ByteBuffer> messages) {
      this.messages = messages;
      return this;
    }

    public void unsetMessages() {
      this.messages = null;
    }

    /** Returns true if field messages is set (has been assigned a value) and false otherwise */
    public boolean isSetMessages() {
      return this.messages != null;
    }

    public void setMessagesIsSet(boolean value) {
      if (!value) {
        this.messages = null;
      }
    }

    /**
     * 
     * @see EncodingType
     */
    public EncodingType getEnc() {
      return this.enc;
    }

    /**
     * 
     * @see EncodingType
     */
    public postMetrics_args setEnc(EncodingType enc) {
      this.enc = enc;
      return this;
    }

    public void unsetEnc() {
      this.enc = null;
    }

    /** Returns true if field enc is set (has been assigned a value) and false otherwise */
    public boolean isSetEnc() {
      return this.enc != null;
    }

    public void setEncIsSet(boolean value) {
      if (!value) {
        this.enc = null;
      }
    }

    public HostID getIdentity() {
      return this.identity;
    }

    public postMetrics_args setIdentity(HostID identity) {
      this.identity = identity;
      return this;
    }

    public void unsetIdentity() {
      this.identity = null;
    }

    /** Returns true if field identity is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentity() {
      return this.identity != null;
    }

    public void setIdentityIsSet(boolean value) {
      if (!value) {
        this.identity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case API_KEY:
        if (value == null) {
          unsetApiKey();
        } else {
          setApiKey((String)value);
        }
        break;

      case MESSAGES:
        if (value == null) {
          unsetMessages();
        } else {
          setMessages((List<ByteBuffer>)value);
        }
        break;

      case ENC:
        if (value == null) {
          unsetEnc();
        } else {
          setEnc((EncodingType)value);
        }
        break;

      case IDENTITY:
        if (value == null) {
          unsetIdentity();
        } else {
          setIdentity((HostID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case API_KEY:
        return getApiKey();

      case MESSAGES:
        return getMessages();

      case ENC:
        return getEnc();

      case IDENTITY:
        return getIdentity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case API_KEY:
        return isSetApiKey();
      case MESSAGES:
        return isSetMessages();
      case ENC:
        return isSetEnc();
      case IDENTITY:
        return isSetIdentity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postMetrics_args)
        return this.equals((postMetrics_args)that);
      return false;
    }

    public boolean equals(postMetrics_args that) {
      if (that == null)
        return false;

      boolean this_present_apiKey = true && this.isSetApiKey();
      boolean that_present_apiKey = true && that.isSetApiKey();
      if (this_present_apiKey || that_present_apiKey) {
        if (!(this_present_apiKey && that_present_apiKey))
          return false;
        if (!this.apiKey.equals(that.apiKey))
          return false;
      }

      boolean this_present_messages = true && this.isSetMessages();
      boolean that_present_messages = true && that.isSetMessages();
      if (this_present_messages || that_present_messages) {
        if (!(this_present_messages && that_present_messages))
          return false;
        if (!this.messages.equals(that.messages))
          return false;
      }

      boolean this_present_enc = true && this.isSetEnc();
      boolean that_present_enc = true && that.isSetEnc();
      if (this_present_enc || that_present_enc) {
        if (!(this_present_enc && that_present_enc))
          return false;
        if (!this.enc.equals(that.enc))
          return false;
      }

      boolean this_present_identity = true && this.isSetIdentity();
      boolean that_present_identity = true && that.isSetIdentity();
      if (this_present_identity || that_present_identity) {
        if (!(this_present_identity && that_present_identity))
          return false;
        if (!this.identity.equals(that.identity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_apiKey = true && (isSetApiKey());
      list.add(present_apiKey);
      if (present_apiKey)
        list.add(apiKey);

      boolean present_messages = true && (isSetMessages());
      list.add(present_messages);
      if (present_messages)
        list.add(messages);

      boolean present_enc = true && (isSetEnc());
      list.add(present_enc);
      if (present_enc)
        list.add(enc.getValue());

      boolean present_identity = true && (isSetIdentity());
      list.add(present_identity);
      if (present_identity)
        list.add(identity);

      return list.hashCode();
    }

    @Override
    public int compareTo(postMetrics_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApiKey()).compareTo(other.isSetApiKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApiKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiKey, other.apiKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessages()).compareTo(other.isSetMessages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnc()).compareTo(other.isSetEnc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enc, other.enc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdentity()).compareTo(other.isSetIdentity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identity, other.identity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postMetrics_args(");
      boolean first = true;

      sb.append("apiKey:");
      if (this.apiKey == null) {
        sb.append("null");
      } else {
        sb.append(this.apiKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messages:");
      if (this.messages == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.messages, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("enc:");
      if (this.enc == null) {
        sb.append("null");
      } else {
        sb.append(this.enc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("identity:");
      if (this.identity == null) {
        sb.append("null");
      } else {
        sb.append(this.identity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (identity != null) {
        identity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postMetrics_argsStandardSchemeFactory implements SchemeFactory {
      public postMetrics_argsStandardScheme getScheme() {
        return new postMetrics_argsStandardScheme();
      }
    }

    private static class postMetrics_argsStandardScheme extends StandardScheme<postMetrics_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postMetrics_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // API_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.apiKey = iprot.readString();
                struct.setApiKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MESSAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                  struct.messages = new ArrayList<ByteBuffer>(_list42.size);
                  ByteBuffer _elem43;
                  for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                  {
                    _elem43 = iprot.readBinary();
                    struct.messages.add(_elem43);
                  }
                  iprot.readListEnd();
                }
                struct.setMessagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENC
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.enc = com.appoptics.ext.thriftgenerated.EncodingType.findByValue(iprot.readI32());
                struct.setEncIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // IDENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.identity = new HostID();
                struct.identity.read(iprot);
                struct.setIdentityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postMetrics_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.apiKey != null) {
          oprot.writeFieldBegin(API_KEY_FIELD_DESC);
          oprot.writeString(struct.apiKey);
          oprot.writeFieldEnd();
        }
        if (struct.messages != null) {
          oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.messages.size()));
            for (ByteBuffer _iter45 : struct.messages)
            {
              oprot.writeBinary(_iter45);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.enc != null) {
          oprot.writeFieldBegin(ENC_FIELD_DESC);
          oprot.writeI32(struct.enc.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.identity != null) {
          oprot.writeFieldBegin(IDENTITY_FIELD_DESC);
          struct.identity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postMetrics_argsTupleSchemeFactory implements SchemeFactory {
      public postMetrics_argsTupleScheme getScheme() {
        return new postMetrics_argsTupleScheme();
      }
    }

    private static class postMetrics_argsTupleScheme extends TupleScheme<postMetrics_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postMetrics_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApiKey()) {
          optionals.set(0);
        }
        if (struct.isSetMessages()) {
          optionals.set(1);
        }
        if (struct.isSetEnc()) {
          optionals.set(2);
        }
        if (struct.isSetIdentity()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetApiKey()) {
          oprot.writeString(struct.apiKey);
        }
        if (struct.isSetMessages()) {
          {
            oprot.writeI32(struct.messages.size());
            for (ByteBuffer _iter46 : struct.messages)
            {
              oprot.writeBinary(_iter46);
            }
          }
        }
        if (struct.isSetEnc()) {
          oprot.writeI32(struct.enc.getValue());
        }
        if (struct.isSetIdentity()) {
          struct.identity.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postMetrics_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.apiKey = iprot.readString();
          struct.setApiKeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.messages = new ArrayList<ByteBuffer>(_list47.size);
            ByteBuffer _elem48;
            for (int _i49 = 0; _i49 < _list47.size; ++_i49)
            {
              _elem48 = iprot.readBinary();
              struct.messages.add(_elem48);
            }
          }
          struct.setMessagesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.enc = com.appoptics.ext.thriftgenerated.EncodingType.findByValue(iprot.readI32());
          struct.setEncIsSet(true);
        }
        if (incoming.get(3)) {
          struct.identity = new HostID();
          struct.identity.read(iprot);
          struct.setIdentityIsSet(true);
        }
      }
    }

  }

  public static class postMetrics_result implements org.apache.thrift.TBase<postMetrics_result, postMetrics_result._Fields>, java.io.Serializable, Cloneable, Comparable<postMetrics_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postMetrics_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postMetrics_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postMetrics_resultTupleSchemeFactory());
    }

    public ResultMessage success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postMetrics_result.class, metaDataMap);
    }

    public postMetrics_result() {
    }

    public postMetrics_result(
      ResultMessage success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postMetrics_result(postMetrics_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultMessage(other.success);
      }
    }

    public postMetrics_result deepCopy() {
      return new postMetrics_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultMessage getSuccess() {
      return this.success;
    }

    public postMetrics_result setSuccess(ResultMessage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postMetrics_result)
        return this.equals((postMetrics_result)that);
      return false;
    }

    public boolean equals(postMetrics_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postMetrics_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postMetrics_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postMetrics_resultStandardSchemeFactory implements SchemeFactory {
      public postMetrics_resultStandardScheme getScheme() {
        return new postMetrics_resultStandardScheme();
      }
    }

    private static class postMetrics_resultStandardScheme extends StandardScheme<postMetrics_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postMetrics_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultMessage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postMetrics_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postMetrics_resultTupleSchemeFactory implements SchemeFactory {
      public postMetrics_resultTupleScheme getScheme() {
        return new postMetrics_resultTupleScheme();
      }
    }

    private static class postMetrics_resultTupleScheme extends TupleScheme<postMetrics_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postMetrics_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postMetrics_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultMessage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postStatus_args implements org.apache.thrift.TBase<postStatus_args, postStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<postStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postStatus_args");

    private static final org.apache.thrift.protocol.TField API_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("apiKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField ENC_FIELD_DESC = new org.apache.thrift.protocol.TField("enc", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField IDENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("identity", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postStatus_argsTupleSchemeFactory());
    }

    public String apiKey; // required
    public List<ByteBuffer> messages; // required
    /**
     * 
     * @see EncodingType
     */
    public EncodingType enc; // required
    public HostID identity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      API_KEY((short)1, "apiKey"),
      MESSAGES((short)2, "messages"),
      /**
       * 
       * @see EncodingType
       */
      ENC((short)3, "enc"),
      IDENTITY((short)4, "identity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // API_KEY
            return API_KEY;
          case 2: // MESSAGES
            return MESSAGES;
          case 3: // ENC
            return ENC;
          case 4: // IDENTITY
            return IDENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.API_KEY, new org.apache.thrift.meta_data.FieldMetaData("apiKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      tmpMap.put(_Fields.ENC, new org.apache.thrift.meta_data.FieldMetaData("enc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EncodingType.class)));
      tmpMap.put(_Fields.IDENTITY, new org.apache.thrift.meta_data.FieldMetaData("identity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postStatus_args.class, metaDataMap);
    }

    public postStatus_args() {
    }

    public postStatus_args(
      String apiKey,
      List<ByteBuffer> messages,
      EncodingType enc,
      HostID identity)
    {
      this();
      this.apiKey = apiKey;
      this.messages = messages;
      this.enc = enc;
      this.identity = identity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postStatus_args(postStatus_args other) {
      if (other.isSetApiKey()) {
        this.apiKey = other.apiKey;
      }
      if (other.isSetMessages()) {
        List<ByteBuffer> __this__messages = new ArrayList<ByteBuffer>(other.messages);
        this.messages = __this__messages;
      }
      if (other.isSetEnc()) {
        this.enc = other.enc;
      }
      if (other.isSetIdentity()) {
        this.identity = new HostID(other.identity);
      }
    }

    public postStatus_args deepCopy() {
      return new postStatus_args(this);
    }

    @Override
    public void clear() {
      this.apiKey = null;
      this.messages = null;
      this.enc = null;
      this.identity = null;
    }

    public String getApiKey() {
      return this.apiKey;
    }

    public postStatus_args setApiKey(String apiKey) {
      this.apiKey = apiKey;
      return this;
    }

    public void unsetApiKey() {
      this.apiKey = null;
    }

    /** Returns true if field apiKey is set (has been assigned a value) and false otherwise */
    public boolean isSetApiKey() {
      return this.apiKey != null;
    }

    public void setApiKeyIsSet(boolean value) {
      if (!value) {
        this.apiKey = null;
      }
    }

    public int getMessagesSize() {
      return (this.messages == null) ? 0 : this.messages.size();
    }

    public java.util.Iterator<ByteBuffer> getMessagesIterator() {
      return (this.messages == null) ? null : this.messages.iterator();
    }

    public void addToMessages(ByteBuffer elem) {
      if (this.messages == null) {
        this.messages = new ArrayList<ByteBuffer>();
      }
      this.messages.add(elem);
    }

    public List<ByteBuffer> getMessages() {
      return this.messages;
    }

    public postStatus_args setMessages(List<ByteBuffer> messages) {
      this.messages = messages;
      return this;
    }

    public void unsetMessages() {
      this.messages = null;
    }

    /** Returns true if field messages is set (has been assigned a value) and false otherwise */
    public boolean isSetMessages() {
      return this.messages != null;
    }

    public void setMessagesIsSet(boolean value) {
      if (!value) {
        this.messages = null;
      }
    }

    /**
     * 
     * @see EncodingType
     */
    public EncodingType getEnc() {
      return this.enc;
    }

    /**
     * 
     * @see EncodingType
     */
    public postStatus_args setEnc(EncodingType enc) {
      this.enc = enc;
      return this;
    }

    public void unsetEnc() {
      this.enc = null;
    }

    /** Returns true if field enc is set (has been assigned a value) and false otherwise */
    public boolean isSetEnc() {
      return this.enc != null;
    }

    public void setEncIsSet(boolean value) {
      if (!value) {
        this.enc = null;
      }
    }

    public HostID getIdentity() {
      return this.identity;
    }

    public postStatus_args setIdentity(HostID identity) {
      this.identity = identity;
      return this;
    }

    public void unsetIdentity() {
      this.identity = null;
    }

    /** Returns true if field identity is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentity() {
      return this.identity != null;
    }

    public void setIdentityIsSet(boolean value) {
      if (!value) {
        this.identity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case API_KEY:
        if (value == null) {
          unsetApiKey();
        } else {
          setApiKey((String)value);
        }
        break;

      case MESSAGES:
        if (value == null) {
          unsetMessages();
        } else {
          setMessages((List<ByteBuffer>)value);
        }
        break;

      case ENC:
        if (value == null) {
          unsetEnc();
        } else {
          setEnc((EncodingType)value);
        }
        break;

      case IDENTITY:
        if (value == null) {
          unsetIdentity();
        } else {
          setIdentity((HostID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case API_KEY:
        return getApiKey();

      case MESSAGES:
        return getMessages();

      case ENC:
        return getEnc();

      case IDENTITY:
        return getIdentity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case API_KEY:
        return isSetApiKey();
      case MESSAGES:
        return isSetMessages();
      case ENC:
        return isSetEnc();
      case IDENTITY:
        return isSetIdentity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postStatus_args)
        return this.equals((postStatus_args)that);
      return false;
    }

    public boolean equals(postStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_apiKey = true && this.isSetApiKey();
      boolean that_present_apiKey = true && that.isSetApiKey();
      if (this_present_apiKey || that_present_apiKey) {
        if (!(this_present_apiKey && that_present_apiKey))
          return false;
        if (!this.apiKey.equals(that.apiKey))
          return false;
      }

      boolean this_present_messages = true && this.isSetMessages();
      boolean that_present_messages = true && that.isSetMessages();
      if (this_present_messages || that_present_messages) {
        if (!(this_present_messages && that_present_messages))
          return false;
        if (!this.messages.equals(that.messages))
          return false;
      }

      boolean this_present_enc = true && this.isSetEnc();
      boolean that_present_enc = true && that.isSetEnc();
      if (this_present_enc || that_present_enc) {
        if (!(this_present_enc && that_present_enc))
          return false;
        if (!this.enc.equals(that.enc))
          return false;
      }

      boolean this_present_identity = true && this.isSetIdentity();
      boolean that_present_identity = true && that.isSetIdentity();
      if (this_present_identity || that_present_identity) {
        if (!(this_present_identity && that_present_identity))
          return false;
        if (!this.identity.equals(that.identity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_apiKey = true && (isSetApiKey());
      list.add(present_apiKey);
      if (present_apiKey)
        list.add(apiKey);

      boolean present_messages = true && (isSetMessages());
      list.add(present_messages);
      if (present_messages)
        list.add(messages);

      boolean present_enc = true && (isSetEnc());
      list.add(present_enc);
      if (present_enc)
        list.add(enc.getValue());

      boolean present_identity = true && (isSetIdentity());
      list.add(present_identity);
      if (present_identity)
        list.add(identity);

      return list.hashCode();
    }

    @Override
    public int compareTo(postStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApiKey()).compareTo(other.isSetApiKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApiKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiKey, other.apiKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessages()).compareTo(other.isSetMessages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnc()).compareTo(other.isSetEnc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enc, other.enc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdentity()).compareTo(other.isSetIdentity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identity, other.identity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postStatus_args(");
      boolean first = true;

      sb.append("apiKey:");
      if (this.apiKey == null) {
        sb.append("null");
      } else {
        sb.append(this.apiKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messages:");
      if (this.messages == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.messages, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("enc:");
      if (this.enc == null) {
        sb.append("null");
      } else {
        sb.append(this.enc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("identity:");
      if (this.identity == null) {
        sb.append("null");
      } else {
        sb.append(this.identity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (identity != null) {
        identity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postStatus_argsStandardSchemeFactory implements SchemeFactory {
      public postStatus_argsStandardScheme getScheme() {
        return new postStatus_argsStandardScheme();
      }
    }

    private static class postStatus_argsStandardScheme extends StandardScheme<postStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // API_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.apiKey = iprot.readString();
                struct.setApiKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MESSAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                  struct.messages = new ArrayList<ByteBuffer>(_list50.size);
                  ByteBuffer _elem51;
                  for (int _i52 = 0; _i52 < _list50.size; ++_i52)
                  {
                    _elem51 = iprot.readBinary();
                    struct.messages.add(_elem51);
                  }
                  iprot.readListEnd();
                }
                struct.setMessagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENC
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.enc = com.appoptics.ext.thriftgenerated.EncodingType.findByValue(iprot.readI32());
                struct.setEncIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // IDENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.identity = new HostID();
                struct.identity.read(iprot);
                struct.setIdentityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.apiKey != null) {
          oprot.writeFieldBegin(API_KEY_FIELD_DESC);
          oprot.writeString(struct.apiKey);
          oprot.writeFieldEnd();
        }
        if (struct.messages != null) {
          oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.messages.size()));
            for (ByteBuffer _iter53 : struct.messages)
            {
              oprot.writeBinary(_iter53);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.enc != null) {
          oprot.writeFieldBegin(ENC_FIELD_DESC);
          oprot.writeI32(struct.enc.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.identity != null) {
          oprot.writeFieldBegin(IDENTITY_FIELD_DESC);
          struct.identity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postStatus_argsTupleSchemeFactory implements SchemeFactory {
      public postStatus_argsTupleScheme getScheme() {
        return new postStatus_argsTupleScheme();
      }
    }

    private static class postStatus_argsTupleScheme extends TupleScheme<postStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApiKey()) {
          optionals.set(0);
        }
        if (struct.isSetMessages()) {
          optionals.set(1);
        }
        if (struct.isSetEnc()) {
          optionals.set(2);
        }
        if (struct.isSetIdentity()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetApiKey()) {
          oprot.writeString(struct.apiKey);
        }
        if (struct.isSetMessages()) {
          {
            oprot.writeI32(struct.messages.size());
            for (ByteBuffer _iter54 : struct.messages)
            {
              oprot.writeBinary(_iter54);
            }
          }
        }
        if (struct.isSetEnc()) {
          oprot.writeI32(struct.enc.getValue());
        }
        if (struct.isSetIdentity()) {
          struct.identity.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.apiKey = iprot.readString();
          struct.setApiKeyIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.messages = new ArrayList<ByteBuffer>(_list55.size);
            ByteBuffer _elem56;
            for (int _i57 = 0; _i57 < _list55.size; ++_i57)
            {
              _elem56 = iprot.readBinary();
              struct.messages.add(_elem56);
            }
          }
          struct.setMessagesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.enc = com.appoptics.ext.thriftgenerated.EncodingType.findByValue(iprot.readI32());
          struct.setEncIsSet(true);
        }
        if (incoming.get(3)) {
          struct.identity = new HostID();
          struct.identity.read(iprot);
          struct.setIdentityIsSet(true);
        }
      }
    }

  }

  public static class postStatus_result implements org.apache.thrift.TBase<postStatus_result, postStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<postStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postStatus_resultTupleSchemeFactory());
    }

    public ResultMessage success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postStatus_result.class, metaDataMap);
    }

    public postStatus_result() {
    }

    public postStatus_result(
      ResultMessage success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postStatus_result(postStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultMessage(other.success);
      }
    }

    public postStatus_result deepCopy() {
      return new postStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultMessage getSuccess() {
      return this.success;
    }

    public postStatus_result setSuccess(ResultMessage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postStatus_result)
        return this.equals((postStatus_result)that);
      return false;
    }

    public boolean equals(postStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postStatus_resultStandardSchemeFactory implements SchemeFactory {
      public postStatus_resultStandardScheme getScheme() {
        return new postStatus_resultStandardScheme();
      }
    }

    private static class postStatus_resultStandardScheme extends StandardScheme<postStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultMessage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postStatus_resultTupleSchemeFactory implements SchemeFactory {
      public postStatus_resultTupleScheme getScheme() {
        return new postStatus_resultTupleScheme();
      }
    }

    private static class postStatus_resultTupleScheme extends TupleScheme<postStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultMessage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");

    private static final org.apache.thrift.protocol.TField API_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("apiKey", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }

    public String apiKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      API_KEY((short)1, "apiKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // API_KEY
            return API_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.API_KEY, new org.apache.thrift.meta_data.FieldMetaData("apiKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    public ping_args(
      String apiKey)
    {
      this();
      this.apiKey = apiKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
      if (other.isSetApiKey()) {
        this.apiKey = other.apiKey;
      }
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
      this.apiKey = null;
    }

    public String getApiKey() {
      return this.apiKey;
    }

    public ping_args setApiKey(String apiKey) {
      this.apiKey = apiKey;
      return this;
    }

    public void unsetApiKey() {
      this.apiKey = null;
    }

    /** Returns true if field apiKey is set (has been assigned a value) and false otherwise */
    public boolean isSetApiKey() {
      return this.apiKey != null;
    }

    public void setApiKeyIsSet(boolean value) {
      if (!value) {
        this.apiKey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case API_KEY:
        if (value == null) {
          unsetApiKey();
        } else {
          setApiKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case API_KEY:
        return getApiKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case API_KEY:
        return isSetApiKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      boolean this_present_apiKey = true && this.isSetApiKey();
      boolean that_present_apiKey = true && that.isSetApiKey();
      if (this_present_apiKey || that_present_apiKey) {
        if (!(this_present_apiKey && that_present_apiKey))
          return false;
        if (!this.apiKey.equals(that.apiKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_apiKey = true && (isSetApiKey());
      list.add(present_apiKey);
      if (present_apiKey)
        list.add(apiKey);

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApiKey()).compareTo(other.isSetApiKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApiKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiKey, other.apiKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append("apiKey:");
      if (this.apiKey == null) {
        sb.append("null");
      } else {
        sb.append(this.apiKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // API_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.apiKey = iprot.readString();
                struct.setApiKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.apiKey != null) {
          oprot.writeFieldBegin(API_KEY_FIELD_DESC);
          oprot.writeString(struct.apiKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApiKey()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApiKey()) {
          oprot.writeString(struct.apiKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.apiKey = iprot.readString();
          struct.setApiKeyIsSet(true);
        }
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }

    public ResultMessage success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      ResultMessage success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultMessage(other.success);
      }
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultMessage getSuccess() {
      return this.success;
    }

    public ping_result setSuccess(ResultMessage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultMessage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultMessage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSettings_args implements org.apache.thrift.TBase<getSettings_args, getSettings_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSettings_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSettings_args");

    private static final org.apache.thrift.protocol.TField API_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("apiKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IDENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("identity", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TRACELYZER_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("tracelyzerVersion", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSettings_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSettings_argsTupleSchemeFactory());
    }

    public String apiKey; // required
    public HostID identity; // required
    public String tracelyzerVersion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      API_KEY((short)1, "apiKey"),
      IDENTITY((short)2, "identity"),
      TRACELYZER_VERSION((short)3, "tracelyzerVersion");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // API_KEY
            return API_KEY;
          case 2: // IDENTITY
            return IDENTITY;
          case 3: // TRACELYZER_VERSION
            return TRACELYZER_VERSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.API_KEY, new org.apache.thrift.meta_data.FieldMetaData("apiKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IDENTITY, new org.apache.thrift.meta_data.FieldMetaData("identity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostID.class)));
      tmpMap.put(_Fields.TRACELYZER_VERSION, new org.apache.thrift.meta_data.FieldMetaData("tracelyzerVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSettings_args.class, metaDataMap);
    }

    public getSettings_args() {
    }

    public getSettings_args(
      String apiKey,
      HostID identity,
      String tracelyzerVersion)
    {
      this();
      this.apiKey = apiKey;
      this.identity = identity;
      this.tracelyzerVersion = tracelyzerVersion;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSettings_args(getSettings_args other) {
      if (other.isSetApiKey()) {
        this.apiKey = other.apiKey;
      }
      if (other.isSetIdentity()) {
        this.identity = new HostID(other.identity);
      }
      if (other.isSetTracelyzerVersion()) {
        this.tracelyzerVersion = other.tracelyzerVersion;
      }
    }

    public getSettings_args deepCopy() {
      return new getSettings_args(this);
    }

    @Override
    public void clear() {
      this.apiKey = null;
      this.identity = null;
      this.tracelyzerVersion = null;
    }

    public String getApiKey() {
      return this.apiKey;
    }

    public getSettings_args setApiKey(String apiKey) {
      this.apiKey = apiKey;
      return this;
    }

    public void unsetApiKey() {
      this.apiKey = null;
    }

    /** Returns true if field apiKey is set (has been assigned a value) and false otherwise */
    public boolean isSetApiKey() {
      return this.apiKey != null;
    }

    public void setApiKeyIsSet(boolean value) {
      if (!value) {
        this.apiKey = null;
      }
    }

    public HostID getIdentity() {
      return this.identity;
    }

    public getSettings_args setIdentity(HostID identity) {
      this.identity = identity;
      return this;
    }

    public void unsetIdentity() {
      this.identity = null;
    }

    /** Returns true if field identity is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentity() {
      return this.identity != null;
    }

    public void setIdentityIsSet(boolean value) {
      if (!value) {
        this.identity = null;
      }
    }

    public String getTracelyzerVersion() {
      return this.tracelyzerVersion;
    }

    public getSettings_args setTracelyzerVersion(String tracelyzerVersion) {
      this.tracelyzerVersion = tracelyzerVersion;
      return this;
    }

    public void unsetTracelyzerVersion() {
      this.tracelyzerVersion = null;
    }

    /** Returns true if field tracelyzerVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetTracelyzerVersion() {
      return this.tracelyzerVersion != null;
    }

    public void setTracelyzerVersionIsSet(boolean value) {
      if (!value) {
        this.tracelyzerVersion = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case API_KEY:
        if (value == null) {
          unsetApiKey();
        } else {
          setApiKey((String)value);
        }
        break;

      case IDENTITY:
        if (value == null) {
          unsetIdentity();
        } else {
          setIdentity((HostID)value);
        }
        break;

      case TRACELYZER_VERSION:
        if (value == null) {
          unsetTracelyzerVersion();
        } else {
          setTracelyzerVersion((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case API_KEY:
        return getApiKey();

      case IDENTITY:
        return getIdentity();

      case TRACELYZER_VERSION:
        return getTracelyzerVersion();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case API_KEY:
        return isSetApiKey();
      case IDENTITY:
        return isSetIdentity();
      case TRACELYZER_VERSION:
        return isSetTracelyzerVersion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSettings_args)
        return this.equals((getSettings_args)that);
      return false;
    }

    public boolean equals(getSettings_args that) {
      if (that == null)
        return false;

      boolean this_present_apiKey = true && this.isSetApiKey();
      boolean that_present_apiKey = true && that.isSetApiKey();
      if (this_present_apiKey || that_present_apiKey) {
        if (!(this_present_apiKey && that_present_apiKey))
          return false;
        if (!this.apiKey.equals(that.apiKey))
          return false;
      }

      boolean this_present_identity = true && this.isSetIdentity();
      boolean that_present_identity = true && that.isSetIdentity();
      if (this_present_identity || that_present_identity) {
        if (!(this_present_identity && that_present_identity))
          return false;
        if (!this.identity.equals(that.identity))
          return false;
      }

      boolean this_present_tracelyzerVersion = true && this.isSetTracelyzerVersion();
      boolean that_present_tracelyzerVersion = true && that.isSetTracelyzerVersion();
      if (this_present_tracelyzerVersion || that_present_tracelyzerVersion) {
        if (!(this_present_tracelyzerVersion && that_present_tracelyzerVersion))
          return false;
        if (!this.tracelyzerVersion.equals(that.tracelyzerVersion))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_apiKey = true && (isSetApiKey());
      list.add(present_apiKey);
      if (present_apiKey)
        list.add(apiKey);

      boolean present_identity = true && (isSetIdentity());
      list.add(present_identity);
      if (present_identity)
        list.add(identity);

      boolean present_tracelyzerVersion = true && (isSetTracelyzerVersion());
      list.add(present_tracelyzerVersion);
      if (present_tracelyzerVersion)
        list.add(tracelyzerVersion);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSettings_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApiKey()).compareTo(other.isSetApiKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApiKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiKey, other.apiKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdentity()).compareTo(other.isSetIdentity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identity, other.identity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTracelyzerVersion()).compareTo(other.isSetTracelyzerVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTracelyzerVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tracelyzerVersion, other.tracelyzerVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSettings_args(");
      boolean first = true;

      sb.append("apiKey:");
      if (this.apiKey == null) {
        sb.append("null");
      } else {
        sb.append(this.apiKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("identity:");
      if (this.identity == null) {
        sb.append("null");
      } else {
        sb.append(this.identity);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tracelyzerVersion:");
      if (this.tracelyzerVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.tracelyzerVersion);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (identity != null) {
        identity.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSettings_argsStandardSchemeFactory implements SchemeFactory {
      public getSettings_argsStandardScheme getScheme() {
        return new getSettings_argsStandardScheme();
      }
    }

    private static class getSettings_argsStandardScheme extends StandardScheme<getSettings_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSettings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // API_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.apiKey = iprot.readString();
                struct.setApiKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IDENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.identity = new HostID();
                struct.identity.read(iprot);
                struct.setIdentityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TRACELYZER_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tracelyzerVersion = iprot.readString();
                struct.setTracelyzerVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSettings_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.apiKey != null) {
          oprot.writeFieldBegin(API_KEY_FIELD_DESC);
          oprot.writeString(struct.apiKey);
          oprot.writeFieldEnd();
        }
        if (struct.identity != null) {
          oprot.writeFieldBegin(IDENTITY_FIELD_DESC);
          struct.identity.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tracelyzerVersion != null) {
          oprot.writeFieldBegin(TRACELYZER_VERSION_FIELD_DESC);
          oprot.writeString(struct.tracelyzerVersion);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSettings_argsTupleSchemeFactory implements SchemeFactory {
      public getSettings_argsTupleScheme getScheme() {
        return new getSettings_argsTupleScheme();
      }
    }

    private static class getSettings_argsTupleScheme extends TupleScheme<getSettings_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSettings_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApiKey()) {
          optionals.set(0);
        }
        if (struct.isSetIdentity()) {
          optionals.set(1);
        }
        if (struct.isSetTracelyzerVersion()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetApiKey()) {
          oprot.writeString(struct.apiKey);
        }
        if (struct.isSetIdentity()) {
          struct.identity.write(oprot);
        }
        if (struct.isSetTracelyzerVersion()) {
          oprot.writeString(struct.tracelyzerVersion);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSettings_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.apiKey = iprot.readString();
          struct.setApiKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.identity = new HostID();
          struct.identity.read(iprot);
          struct.setIdentityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tracelyzerVersion = iprot.readString();
          struct.setTracelyzerVersionIsSet(true);
        }
      }
    }

  }

  public static class getSettings_result implements org.apache.thrift.TBase<getSettings_result, getSettings_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSettings_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSettings_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSettings_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSettings_resultTupleSchemeFactory());
    }

    public SettingsResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SettingsResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSettings_result.class, metaDataMap);
    }

    public getSettings_result() {
    }

    public getSettings_result(
      SettingsResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSettings_result(getSettings_result other) {
      if (other.isSetSuccess()) {
        this.success = new SettingsResult(other.success);
      }
    }

    public getSettings_result deepCopy() {
      return new getSettings_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SettingsResult getSuccess() {
      return this.success;
    }

    public getSettings_result setSuccess(SettingsResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SettingsResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSettings_result)
        return this.equals((getSettings_result)that);
      return false;
    }

    public boolean equals(getSettings_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSettings_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSettings_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSettings_resultStandardSchemeFactory implements SchemeFactory {
      public getSettings_resultStandardScheme getScheme() {
        return new getSettings_resultStandardScheme();
      }
    }

    private static class getSettings_resultStandardScheme extends StandardScheme<getSettings_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSettings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SettingsResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSettings_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSettings_resultTupleSchemeFactory implements SchemeFactory {
      public getSettings_resultTupleScheme getScheme() {
        return new getSettings_resultTupleScheme();
      }
    }

    private static class getSettings_resultTupleScheme extends TupleScheme<getSettings_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSettings_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSettings_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SettingsResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
