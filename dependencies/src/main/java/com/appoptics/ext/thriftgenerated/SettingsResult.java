/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.appoptics.ext.thriftgenerated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2020-11-10")
public class SettingsResult implements org.apache.thrift.TBase<SettingsResult, SettingsResult._Fields>, java.io.Serializable, Cloneable, Comparable<SettingsResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SettingsResult");

  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SETTINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("settings", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField WARNING_FIELD_DESC = new org.apache.thrift.protocol.TField("warning", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SettingsResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SettingsResultTupleSchemeFactory());
  }

  /**
   * 
   * @see ResultCode
   */
  public ResultCode result; // required
  public String arg; // required
  public List<OboeSetting> settings; // required
  public String warning; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ResultCode
     */
    RESULT((short)1, "result"),
    ARG((short)2, "arg"),
    SETTINGS((short)3, "settings"),
    WARNING((short)4, "warning");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT
          return RESULT;
        case 2: // ARG
          return ARG;
        case 3: // SETTINGS
          return SETTINGS;
        case 4: // WARNING
          return WARNING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ResultCode.class)));
    tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTINGS, new org.apache.thrift.meta_data.FieldMetaData("settings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OboeSetting.class))));
    tmpMap.put(_Fields.WARNING, new org.apache.thrift.meta_data.FieldMetaData("warning", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SettingsResult.class, metaDataMap);
  }

  public SettingsResult() {
  }

  public SettingsResult(
    ResultCode result,
    String arg,
    List<OboeSetting> settings,
    String warning)
  {
    this();
    this.result = result;
    this.arg = arg;
    this.settings = settings;
    this.warning = warning;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SettingsResult(SettingsResult other) {
    if (other.isSetResult()) {
      this.result = other.result;
    }
    if (other.isSetArg()) {
      this.arg = other.arg;
    }
    if (other.isSetSettings()) {
      List<OboeSetting> __this__settings = new ArrayList<OboeSetting>(other.settings.size());
      for (OboeSetting other_element : other.settings) {
        __this__settings.add(new OboeSetting(other_element));
      }
      this.settings = __this__settings;
    }
    if (other.isSetWarning()) {
      this.warning = other.warning;
    }
  }

  public SettingsResult deepCopy() {
    return new SettingsResult(this);
  }

  @Override
  public void clear() {
    this.result = null;
    this.arg = null;
    this.settings = null;
    this.warning = null;
  }

  /**
   * 
   * @see ResultCode
   */
  public ResultCode getResult() {
    return this.result;
  }

  /**
   * 
   * @see ResultCode
   */
  public SettingsResult setResult(ResultCode result) {
    this.result = result;
    return this;
  }

  public void unsetResult() {
    this.result = null;
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean value) {
    if (!value) {
      this.result = null;
    }
  }

  public String getArg() {
    return this.arg;
  }

  public SettingsResult setArg(String arg) {
    this.arg = arg;
    return this;
  }

  public void unsetArg() {
    this.arg = null;
  }

  /** Returns true if field arg is set (has been assigned a value) and false otherwise */
  public boolean isSetArg() {
    return this.arg != null;
  }

  public void setArgIsSet(boolean value) {
    if (!value) {
      this.arg = null;
    }
  }

  public int getSettingsSize() {
    return (this.settings == null) ? 0 : this.settings.size();
  }

  public java.util.Iterator<OboeSetting> getSettingsIterator() {
    return (this.settings == null) ? null : this.settings.iterator();
  }

  public void addToSettings(OboeSetting elem) {
    if (this.settings == null) {
      this.settings = new ArrayList<OboeSetting>();
    }
    this.settings.add(elem);
  }

  public List<OboeSetting> getSettings() {
    return this.settings;
  }

  public SettingsResult setSettings(List<OboeSetting> settings) {
    this.settings = settings;
    return this;
  }

  public void unsetSettings() {
    this.settings = null;
  }

  /** Returns true if field settings is set (has been assigned a value) and false otherwise */
  public boolean isSetSettings() {
    return this.settings != null;
  }

  public void setSettingsIsSet(boolean value) {
    if (!value) {
      this.settings = null;
    }
  }

  public String getWarning() {
    return this.warning;
  }

  public SettingsResult setWarning(String warning) {
    this.warning = warning;
    return this;
  }

  public void unsetWarning() {
    this.warning = null;
  }

  /** Returns true if field warning is set (has been assigned a value) and false otherwise */
  public boolean isSetWarning() {
    return this.warning != null;
  }

  public void setWarningIsSet(boolean value) {
    if (!value) {
      this.warning = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((ResultCode)value);
      }
      break;

    case ARG:
      if (value == null) {
        unsetArg();
      } else {
        setArg((String)value);
      }
      break;

    case SETTINGS:
      if (value == null) {
        unsetSettings();
      } else {
        setSettings((List<OboeSetting>)value);
      }
      break;

    case WARNING:
      if (value == null) {
        unsetWarning();
      } else {
        setWarning((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT:
      return getResult();

    case ARG:
      return getArg();

    case SETTINGS:
      return getSettings();

    case WARNING:
      return getWarning();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESULT:
      return isSetResult();
    case ARG:
      return isSetArg();
    case SETTINGS:
      return isSetSettings();
    case WARNING:
      return isSetWarning();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SettingsResult)
      return this.equals((SettingsResult)that);
    return false;
  }

  public boolean equals(SettingsResult that) {
    if (that == null)
      return false;

    boolean this_present_result = true && this.isSetResult();
    boolean that_present_result = true && that.isSetResult();
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (!this.result.equals(that.result))
        return false;
    }

    boolean this_present_arg = true && this.isSetArg();
    boolean that_present_arg = true && that.isSetArg();
    if (this_present_arg || that_present_arg) {
      if (!(this_present_arg && that_present_arg))
        return false;
      if (!this.arg.equals(that.arg))
        return false;
    }

    boolean this_present_settings = true && this.isSetSettings();
    boolean that_present_settings = true && that.isSetSettings();
    if (this_present_settings || that_present_settings) {
      if (!(this_present_settings && that_present_settings))
        return false;
      if (!this.settings.equals(that.settings))
        return false;
    }

    boolean this_present_warning = true && this.isSetWarning();
    boolean that_present_warning = true && that.isSetWarning();
    if (this_present_warning || that_present_warning) {
      if (!(this_present_warning && that_present_warning))
        return false;
      if (!this.warning.equals(that.warning))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_result = true && (isSetResult());
    list.add(present_result);
    if (present_result)
      list.add(result.getValue());

    boolean present_arg = true && (isSetArg());
    list.add(present_arg);
    if (present_arg)
      list.add(arg);

    boolean present_settings = true && (isSetSettings());
    list.add(present_settings);
    if (present_settings)
      list.add(settings);

    boolean present_warning = true && (isSetWarning());
    list.add(present_warning);
    if (present_warning)
      list.add(warning);

    return list.hashCode();
  }

  @Override
  public int compareTo(SettingsResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArg()).compareTo(other.isSetArg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, other.arg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettings()).compareTo(other.isSetSettings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settings, other.settings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWarning()).compareTo(other.isSetWarning());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWarning()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.warning, other.warning);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SettingsResult(");
    boolean first = true;

    sb.append("result:");
    if (this.result == null) {
      sb.append("null");
    } else {
      sb.append(this.result);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("arg:");
    if (this.arg == null) {
      sb.append("null");
    } else {
      sb.append(this.arg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settings:");
    if (this.settings == null) {
      sb.append("null");
    } else {
      sb.append(this.settings);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("warning:");
    if (this.warning == null) {
      sb.append("null");
    } else {
      sb.append(this.warning);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SettingsResultStandardSchemeFactory implements SchemeFactory {
    public SettingsResultStandardScheme getScheme() {
      return new SettingsResultStandardScheme();
    }
  }

  private static class SettingsResultStandardScheme extends StandardScheme<SettingsResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SettingsResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.result = com.appoptics.ext.thriftgenerated.ResultCode.findByValue(iprot.readI32());
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ARG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.arg = iprot.readString();
              struct.setArgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SETTINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                struct.settings = new ArrayList<OboeSetting>(_list26.size);
                OboeSetting _elem27;
                for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                {
                  _elem27 = new OboeSetting();
                  _elem27.read(iprot);
                  struct.settings.add(_elem27);
                }
                iprot.readListEnd();
              }
              struct.setSettingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WARNING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.warning = iprot.readString();
              struct.setWarningIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SettingsResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.result != null) {
        oprot.writeFieldBegin(RESULT_FIELD_DESC);
        oprot.writeI32(struct.result.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.arg != null) {
        oprot.writeFieldBegin(ARG_FIELD_DESC);
        oprot.writeString(struct.arg);
        oprot.writeFieldEnd();
      }
      if (struct.settings != null) {
        oprot.writeFieldBegin(SETTINGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.settings.size()));
          for (OboeSetting _iter29 : struct.settings)
          {
            _iter29.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.warning != null) {
        oprot.writeFieldBegin(WARNING_FIELD_DESC);
        oprot.writeString(struct.warning);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SettingsResultTupleSchemeFactory implements SchemeFactory {
    public SettingsResultTupleScheme getScheme() {
      return new SettingsResultTupleScheme();
    }
  }

  private static class SettingsResultTupleScheme extends TupleScheme<SettingsResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SettingsResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetResult()) {
        optionals.set(0);
      }
      if (struct.isSetArg()) {
        optionals.set(1);
      }
      if (struct.isSetSettings()) {
        optionals.set(2);
      }
      if (struct.isSetWarning()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetResult()) {
        oprot.writeI32(struct.result.getValue());
      }
      if (struct.isSetArg()) {
        oprot.writeString(struct.arg);
      }
      if (struct.isSetSettings()) {
        {
          oprot.writeI32(struct.settings.size());
          for (OboeSetting _iter30 : struct.settings)
          {
            _iter30.write(oprot);
          }
        }
      }
      if (struct.isSetWarning()) {
        oprot.writeString(struct.warning);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SettingsResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.result = com.appoptics.ext.thriftgenerated.ResultCode.findByValue(iprot.readI32());
        struct.setResultIsSet(true);
      }
      if (incoming.get(1)) {
        struct.arg = iprot.readString();
        struct.setArgIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.settings = new ArrayList<OboeSetting>(_list31.size);
          OboeSetting _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = new OboeSetting();
            _elem32.read(iprot);
            struct.settings.add(_elem32);
          }
        }
        struct.setSettingsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.warning = iprot.readString();
        struct.setWarningIsSet(true);
      }
    }
  }

}

