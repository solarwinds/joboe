version: 2.1 # use CircleCI 2.1

orbs:
  ghas: solarwinds-cloud/ghas@0.1.1

executors:
  java:
    resource_class: xlarge
    parameters:
      tag:
        type: string
        default: 8-jdk-hotspot
    docker:
      - image: 377069709311.dkr.ecr.us-east-1.amazonaws.com/base_ci_build:<< parameters.tag >>
        aws_auth:
          aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
          aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    working_directory: ~/repo
    environment:
      PROJECT_NAME: joboe
      SLACK_NOTIFY_CHANNEL: "#chubi-test"
      EMOJI: ":circle-pass:"
      MAVEN_OPTS: -Xms2g -Xmx3g -Dmaven.resolver.transport=wagon

commands:
  cacheit:
    steps:
      - run:
          name: generate cache checksum
          command: find . -name pom.xml | sort | xargs -n 1 cat > /tmp/maven_cached_poms
      - restore_cache:
          keys:
            - maven-repo-v2-{{ .Branch }}-{{ checksum "/tmp/maven_cached_poms" }}
            - maven-repo-v2-{{ .Branch }}-
            - maven-repo-v2-
      - run: mvn -q -s .circleci/m2/settings.xml install -DskipTests
      - save_cache:
          paths:
            - ~/.m2/repository
          key: maven-repo-v2-{{ .Branch }}-{{ checksum "/tmp/maven_cached_poms" }}

jobs:
  test:
    executor: java
    steps: # a collection of executable commands
      - checkout # check out source code to working directory
      - cacheit
      - run:
          name: Run maven verify
          command: mvn -s .circleci/m2/settings.xml clean verify
      - store_artifacts: # uploads the test coverage report
          path: core/target/coverage-report
      - store_test_results:
          path: core/target/surefire-reports
      - run:
          name: Check shading(core)
          command: |
            VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            code=0
            for path in $(jar tf "core/target/core-$VERSION.jar" | grep -E -v '^((com/solarwinds|META))')
            do
              PACKAGE=$(echo "$path" | awk -F/ '{print $2}')
              if [ -n "$PACKAGE" ]; then
                echo "Package ($path) is not shaded"
                code=1
              fi
            done
            exit $code
      - run:
          name: Check shading(metric)
          command: |
            VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            code=0
            for path in $(jar tf "metrics/target/metrics-$VERSION.jar" | grep -E -v '^((com/solarwinds|META))')
            do
              PACKAGE=$(echo "$path" | awk -F/ '{print $2}')
              if [ -n "$PACKAGE" ]; then
                echo "Package ($path) is not shaded"
                code=1
              fi
            done
            exit $code
  deploy:
    executor: java
    steps:
      - checkout
      - cacheit
      - run:
          name: Deploy snapshot
          command: |
            VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            BRANCH=$(echo -n "${CIRCLE_BRANCH}" | sed -e 's/[^0-9a-zA-Z\._\-]/./g' | tr '[:upper:]' '[:lower:]')
            COMMIT_HASH="${CIRCLE_SHA1:0:7}"
            NEW_VERSION=${VERSION%%-SNAPSHOT}-$BRANCH-$COMMIT_HASH-SNAPSHOT
            
            mvn versions:set -DnewVersion=$NEW_VERSION
            mvn -s .circleci/m2/settings.xml -T 8 deploy -DskipTests            
            source /ci-scripts/bin/helpers.sh
            send_to_slack "A new snapshot is ready \`$NEW_VERSION\`"
  release:
    executor: java
    steps:
      - checkout
      - cacheit
      - run:
          name: Check versions
          command: mvn versions:use-releases
      - run:
          name: Configure git for release
          command: |
            git config user.name "${GITHUB_USERNAME}"
            git config user.email "${GITHUB_USERNAME}-github@solarwinds.com"
      - run:
          name: Rewrite github url for release tagging
          command: |
            git config --global url."https://${GITHUB_TOKEN}:@github.com/".insteadOf git@github.com:
      - run:
          name: Perform release
          command: |
            VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            VERSION=${VERSION%%-SNAPSHOT}
            
            curl -f -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${GITHUB_TOKEN}"\
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/releases \
              -d '{
                    "tag_name":"v'"$VERSION"'",
                    "name":"v'"$VERSION"'",
                    "body":"New release: v'"$VERSION"' for the OpenTelemetry custom distro",
                    "draft":false,
                    "prerelease":false,
                    "generate_release_notes":false
                  }'
            
            mvn versions:set -DnewVersion=$VERSION
            mvn -s .circleci/m2/settings.xml -T 8 deploy -DskipTests   
            
            echo "Current version is $VERSION"
            source /ci-scripts/bin/helpers.sh
            send_to_slack "A new release is ready \`$VERSION\`"

workflows:
  build_test_release:
    jobs:
      - test:
          context:
            - AWS_CIRCLE_CI_BUILD
            - solarwinds-cloud-github-read-access
      - deploy:
          context:
            - SLACK_HOOK
            - AWS_CIRCLE_CI_BUILD
            - solarwinds-cloud-github-write-access
          filters:
            branches:
              ignore: otel
      - approve_me:
          type: approval
          requires:
            - test
          filters:
            branches:
              only: otel
      - release:
          context:
            - SLACK_HOOK
            - AWS_CIRCLE_CI_BUILD
            - solarwinds-cloud-github-write-access
          requires:
            - approve_me
          filters:
            branches:
              only: otel

  code-scanning:
    jobs:
      - ghas/codeql:
          executor: java
          checkout: true
          category: joboe-scan
          build_steps:
            - run:
                name: Build project
                command:  mvn -s .circleci/m2/settings.xml clean install -DskipTests
          language: java
          suite: security-and-quality
          context:
            - ghas-code-scanning
            - AWS_CIRCLE_CI_BUILD
            - solarwinds-cloud-github-write-access